Package br.ufs.dcomp.compilers.project.nonneumann;

Helpers
	hex_identifier = '0x';
	semicolon = ';';
	multi_line_comment_open = '{-';
	multi_line_comment_close = '-}';
	any_char = [0x0 .. 0xfffff];
	hex_alpha_numerical_digit = ['A'..'F'];
	digit = ['0'..'9'];
	char = (['a'..'z'] | ['A'..'Z']);
	space = ' ';
	rc = 13;
	nl = 10;
	tab = 9;
 
Tokens
	tk_comment_line = (semicolon([0..9] | 11 | 12 | [14..0xfffff])*);
	tk_comment_multi_line = (multi_line_comment_open(([0..44] | [46..0xfffff]) | ('-'+([0..44] | [46..124] | [126..0xfffff])))*'-'+'}');
	

	tk_reserved_entry = 'entry';
	tk_reserved_function = 'function';
	tk_reserved_const = 'const';
	tk_reserved_type_int = 'int';
	tk_reserved_type_bool = 'bool';
	tk_reserved_type_real = 'real';
	tk_reserved_bool_true = 'true';
	tk_reserved_bool_false = 'false';
	tk_reserved_bool_and = 'and';
	tk_reserved_bool_or = 'or';	
	tk_reserved_if = 'if';
	tk_reserved_then = 'then';
	tk_reserved_else = 'else';
	tk_reserved_lambda = 'lambda';
	
	tk_number_integer_dec = (digit+);
	tk_number_integer_hex = (hex_identifier(digit | hex_alpha_numerical_digit)+);
 	
 	tk_number_float = (digit+('.')digit+);
 	tk_number_float_cientific_notation = ((digit+)('E')('-')?(digit+));
 	
	tk_sign_plus = '+';
	tk_sign_minus = '-';
	tk_sign_mult = '*';
	tk_sign_div = '/';
	tk_sign_mod = '%';
	tk_sign_colon = ':';
	tk_sign_comma = ',';
	tk_sign_exclamation = '!';
	tk_sign_par_open = '(';
	tk_sign_par_close = ')';
	tk_sign_brace_open = '[';
	tk_sign_brace_close = ']';
	tk_sign_bool_equal = '=';
	tk_sign_bool_gt = '>';
	tk_sign_bool_lt = '<';
 
	tk_blank = (space | rc | nl | tab)+;
	
	tk_id = ((char | '_')+(digit | char)*);
	
Ignored Tokens
	tk_blank,
	tk_comment_line,
	tk_comment_multi_line;
	
Productions

	program{-> a_program} = function_dec+{-> New a_program([function_dec.a_function_dec])};
	
	function_dec{-> a_function_dec} = 
		{dec} tk_sign_par_open tk_reserved_function type tk_id parameters_function_aux tk_sign_colon exp_function_aux tk_sign_par_close {-> New a_function_dec.dec(type.a_type, tk_id, parameters_function_aux.a_parameters_function_aux, exp_function_aux.a_exp_function_aux)}
		| {entry}  tk_reserved_entry tk_sign_par_open tk_reserved_function type tk_id parameters_function_aux tk_sign_colon exp_function_aux tk_sign_par_close {-> New a_function_dec.entry(type.a_type, tk_id, parameters_function_aux.a_parameters_function_aux, exp_function_aux.a_exp_function_aux)};
	
	parameters_function_aux{-> a_parameters_function_aux} = tk_sign_par_open parameters* tk_sign_par_close {-> New a_parameters_function_aux([parameters.a_parameters])};
	
	exp_function_aux{-> a_exp_function_aux} = tk_sign_par_open exp tk_sign_par_close{-> New a_exp_function_aux(exp.a_exp)};
		
	signature{-> a_signature} = type tk_id tk_sign_par_open parameters_signature tk_sign_par_close {->New a_signature(type.a_type, tk_id, parameters_signature.a_parameters_signature)};

	lambda{-> a_lambda} = tk_reserved_lambda tk_sign_par_open id_list? tk_sign_par_close tk_sign_colon term tk_sign_brace_open lambda_exp_list? tk_sign_brace_close{-> New a_lambda(id_list.a_id_list, term.a_exp, lambda_exp_list.a_lambda_exp_list)};	
	
	dec_cons{-> a_dec_cons} = {dec_cons} tk_sign_par_open tk_reserved_const type tk_id exp tk_sign_par_close{-> New a_dec_cons(type.a_type, tk_id, exp.a_exp)};

	
	
	lambda_exp_list{-> a_lambda_exp_list} = exp lambda_exp_list_aux* {-> New a_lambda_exp_list(exp.a_exp, [lambda_exp_list_aux.a_lambda_exp_list_aux])};

	type{-> a_type} = {tk_reserved_type_int}tk_reserved_type_int {-> New a_type.tk_reserved_type_int(tk_reserved_type_int)}
		|{tk_reserved_type_bool}tk_reserved_type_bool {-> New a_type.tk_reserved_type_bool(tk_reserved_type_bool)}
		|{tk_reserved_type_real}tk_reserved_type_real {-> New a_type.tk_reserved_type_real(tk_reserved_type_real)};
		
	
	lambda_exp_list_aux{-> a_lambda_exp_list_aux} = tk_sign_comma exp{-> New a_lambda_exp_list_aux(exp.a_exp)};
	
	boolean_value{-> a_boolean_value} = {tk_reserved_bool_true}tk_reserved_bool_true{-> New a_boolean_value.tk_reserved_bool_true(tk_reserved_bool_true)}
		|{tk_reserved_bool_false}tk_reserved_bool_false {-> New a_boolean_value.tk_reserved_bool_false(tk_reserved_bool_false)};	
	
	parameters{-> a_parameters} = parameter parameters_aux* {-> New a_parameters(parameter.a_parameter, [parameters_aux.a_parameters_aux])};
	
	parameters_aux{-> a_parameters_aux} = tk_sign_comma parameter{-> New a_parameters_aux(parameter.a_parameter)};
	

	term{-> a_exp} = {literal} literal {-> New a_exp.a_literal(literal.a_literal)} 
		|{function_call} function_call {-> New a_exp.a_function_call(function_call.a_function_call)}
		|{exp} tk_sign_par_open dec_cons* exp tk_sign_par_close{-> New a_exp.a_exp_bloc([dec_cons.a_dec_cons], exp.a_exp)};	
	
	parameter{-> a_parameter} =  {dec} type tk_id {-> New a_parameter.dec(type.a_type, tk_id)}
		|{signature}signature {-> New a_parameter.signature(signature.a_signature)}; 
	
	parameter_signature{-> a_parameter_signature} = {type} type {-> New a_parameter_signature.type(type.a_type)}
		|{signature} signature {-> New a_parameter_signature.signature(signature.a_signature)};
		
	parameters_signature_aux{-> a_parameters_signature_aux} = tk_sign_comma parameter_signature{-> New a_parameters_signature_aux(parameter_signature.a_parameter_signature)};		
	
	parameters_signature{-> a_parameters_signature} = parameter_signature parameters_signature_aux*{-> New a_parameters_signature(parameter_signature.a_parameter_signature, [parameters_signature_aux.a_parameters_signature_aux])};	
		
	if_stmt{-> a_exp} = if_stmt_exp_aux tk_reserved_then term if_stmt_else_aux{-> New a_exp.a_if_stmt(if_stmt_exp_aux.a_exp, term.a_exp, if_stmt_else_aux.a_exp)};
		
		
	
	id_list{-> a_id_list} = tk_id id_list_aux*{-> New a_id_list(tk_id, [id_list_aux.a_id_list_aux])};
	
	id_list_aux{-> a_id_list_aux} = tk_sign_comma tk_id{-> New a_id_list_aux(tk_id)};
	
	op{-> a_exp} = {factor}factor {-> factor.a_exp}
		|{plus}op tk_sign_plus factor {-> New a_exp.a_plus(op.a_exp, factor.a_exp)}
  		|{minus}op tk_sign_minus factor {-> New a_exp.a_minus(op.a_exp, factor.a_exp)};
			
	factor{-> a_exp} = {term} term {-> term.a_exp}
		|{mult} factor tk_sign_mult term {-> New a_exp.a_mult(factor.a_exp, term.a_exp) }
		|{neg} negation {-> New a_exp.a_negation(negation.a_exp)}
		|{div} factor tk_sign_div term {-> New a_exp.a_div(factor.a_exp, term.a_exp) }
		|{mod} factor tk_sign_mod term {-> New a_exp.a_mod(factor.a_exp, term.a_exp) };
		
	negation{-> a_exp} = tk_sign_minus term {-> New a_exp.a_negation(term.a_exp)};
	
	literal{-> a_literal} = {boolean_value}boolean_value {-> New a_literal.a_boolean_value(boolean_value.a_boolean_value)}
		|{numeral_float}numeral_float  {-> New a_literal.a_numeral_float(numeral_float.a_numeral_float)}
		|{numeral_int}numeral_int {-> New a_literal.a_numeral_int(numeral_int.a_numeral_int)};

	exp{-> a_exp} = {gt} exp tk_sign_bool_gt op {-> New a_exp.a_gt(exp.a_exp, op.a_exp)}
		|{lt}exp tk_sign_bool_lt op {-> New a_exp.a_lt(exp.a_exp, op.a_exp)}
		|{equal}exp tk_sign_bool_equal op {-> New a_exp.a_equal(exp.a_exp, op.a_exp)}
		|{neg_bool} tk_sign_exclamation op {-> New a_exp.a_negation(op.a_exp)}
		|{and}exp tk_reserved_bool_and op {-> New a_exp.a_and(exp.a_exp, op.a_exp)}
		|{or}exp tk_reserved_bool_or op {-> New a_exp.a_or(exp.a_exp, op.a_exp)}
		|{if_stmt} if_stmt {-> if_stmt.a_exp}
		|{lambda} lambda {-> New a_exp.a_lambda(lambda.a_lambda)}
		|{op}op {-> op.a_exp};
		
	if_stmt_exp_aux{-> a_exp} = tk_reserved_if term{-> term.a_exp};
	
	if_stmt_else_aux{-> a_exp} = tk_reserved_else term{-> term.a_exp};
	
	numeral_float{-> a_numeral_float} = {tk_number_float}tk_number_float {-> New a_numeral_float.tk_number_float(tk_number_float)}
		|{tk_number_float_cientific_notation}tk_number_float_cientific_notation {-> New a_numeral_float.tk_number_float_cientific_notation(tk_number_float_cientific_notation)};
		
	numeral_int{-> a_numeral_int} = {tk_number_integer_dec}tk_number_integer_dec {-> New a_numeral_int.tk_number_integer_dec(tk_number_integer_dec)}
		|{tk_number_integer_hex}tk_number_integer_hex{-> New a_numeral_int.tk_number_integer_hex(tk_number_integer_hex)}; 
	
	function_call{-> a_function_call} = {id}tk_id tk_sign_par_open exp_list? tk_sign_par_close{-> New a_function_call(tk_id, [exp_list.a_exp_list])};
	
	exp_list{-> a_exp_list} = {exp_list} exp exp_list_aux* {-> New a_exp_list(exp.a_exp, [exp_list_aux.a_exp_list_aux])};
		
	exp_list_aux{-> a_exp_list_aux} = {exp_list_aux}tk_sign_comma exp {-> New a_exp_list_aux(exp.a_exp)};
		

Abstract Syntax Tree



//Inicio
a_program = a_function_dec+;
a_function_dec = {dec} a_type tk_id a_parameters_function_aux a_exp_function_aux
				 |{entry} a_type tk_id a_parameters_function_aux a_exp_function_aux; 

//TIPOS			
a_type = {tk_reserved_type_int} tk_reserved_type_int
	| {tk_reserved_type_bool} tk_reserved_type_bool
	| {tk_reserved_type_real} tk_reserved_type_real;	

//Funcoes

a_function_call = tk_id a_exp_list*;

a_parameter =  {dec} a_type tk_id
	| {signature} a_signature;

a_parameter_signature = {type} a_type
	| {signature} a_signature;
	
	
	
a_parameters = a_parameter a_parameters_aux*;		
a_signature = a_type tk_id a_parameters_signature;


a_dec_cons = a_type tk_id a_exp;


a_boolean_value = {tk_reserved_bool_true}tk_reserved_bool_true
		|{tk_reserved_bool_false}tk_reserved_bool_false;
		
a_numeral_float = {tk_number_float}tk_number_float
		|{tk_number_float_cientific_notation}tk_number_float_cientific_notation;
		
a_literal = {a_boolean_value} a_boolean_value
		|{a_numeral_float}a_numeral_float
		|{a_numeral_int}a_numeral_int;		
		
a_numeral_int = {tk_number_integer_dec}tk_number_integer_dec
	|{tk_number_integer_hex}tk_number_integer_hex;			
			
//EXPRESS√ÉO
		
a_exp = {a_if_stmt} [left]:a_exp [middle]:a_exp [right]:a_exp
	| {a_or} [left]:a_exp [right]:a_exp
	| {a_and} [left]:a_exp [right]:a_exp
	| {a_equal} [left]:a_exp [right]:a_exp
	| {a_lt} [left]:a_exp [right]:a_exp
	| {a_gt} [left]:a_exp [right]:a_exp
	| {a_negation} a_exp
	| {a_parenthesis} a_exp
	| {a_mod} [left]:a_exp [right]:a_exp
	| {a_mult} [left]:a_exp [right]:a_exp
	| {a_div} [left]:a_exp [right]:a_exp
	| {a_type} a_type
	| {a_literal} a_literal
	| {a_function_call} a_function_call
	|{boolean_value}a_boolean_value
	|{numeral_float}a_numeral_float
	|{numeral_int}a_numeral_int
	|{a_exp_bloc} a_dec_cons* a_exp
	|{a_plus}[left]:a_exp [right]:a_exp 
  	|{a_minus}[left]:a_exp [right]:a_exp
  	|{a_lambda} a_lambda;
	
a_id_list = tk_id a_id_list_aux*;
a_id_list_aux = tk_id;
a_id = tk_id;
a_list_exp = a_exp;
a_lambda =  a_id_list? a_exp a_lambda_exp_list?;
a_lambda_exp_list = a_exp a_lambda_exp_list_aux*;
a_lambda_exp_list_aux = a_exp;
a_exp_list =  a_exp a_exp_list_aux*;
a_exp_list_aux = a_exp;
a_parameters_signature_aux = a_parameter_signature;			
a_parameters_signature = a_parameter_signature a_parameters_signature_aux*;
a_parameters_function_aux = a_parameters*;
a_exp_function_aux =  a_exp;
a_parameters_aux = a_parameter;
a_parameters_list = a_parameter;