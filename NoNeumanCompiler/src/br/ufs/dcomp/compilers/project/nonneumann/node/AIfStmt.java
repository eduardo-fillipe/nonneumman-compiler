/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.node;

import br.ufs.dcomp.compilers.project.nonneumann.analysis.*;

@SuppressWarnings("nls")
public final class AIfStmt extends PIfStmt
{
    private PIfStmtExpAux _ifStmtExpAux_;
    private TTkReservedThen _tkReservedThen_;
    private PTerm _term_;
    private PIfStmtElseAux _ifStmtElseAux_;

    public AIfStmt()
    {
        // Constructor
    }

    public AIfStmt(
        @SuppressWarnings("hiding") PIfStmtExpAux _ifStmtExpAux_,
        @SuppressWarnings("hiding") TTkReservedThen _tkReservedThen_,
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") PIfStmtElseAux _ifStmtElseAux_)
    {
        // Constructor
        setIfStmtExpAux(_ifStmtExpAux_);

        setTkReservedThen(_tkReservedThen_);

        setTerm(_term_);

        setIfStmtElseAux(_ifStmtElseAux_);

    }

    @Override
    public Object clone()
    {
        return new AIfStmt(
            cloneNode(this._ifStmtExpAux_),
            cloneNode(this._tkReservedThen_),
            cloneNode(this._term_),
            cloneNode(this._ifStmtElseAux_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStmt(this);
    }

    public PIfStmtExpAux getIfStmtExpAux()
    {
        return this._ifStmtExpAux_;
    }

    public void setIfStmtExpAux(PIfStmtExpAux node)
    {
        if(this._ifStmtExpAux_ != null)
        {
            this._ifStmtExpAux_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifStmtExpAux_ = node;
    }

    public TTkReservedThen getTkReservedThen()
    {
        return this._tkReservedThen_;
    }

    public void setTkReservedThen(TTkReservedThen node)
    {
        if(this._tkReservedThen_ != null)
        {
            this._tkReservedThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkReservedThen_ = node;
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public PIfStmtElseAux getIfStmtElseAux()
    {
        return this._ifStmtElseAux_;
    }

    public void setIfStmtElseAux(PIfStmtElseAux node)
    {
        if(this._ifStmtElseAux_ != null)
        {
            this._ifStmtElseAux_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifStmtElseAux_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifStmtExpAux_)
            + toString(this._tkReservedThen_)
            + toString(this._term_)
            + toString(this._ifStmtElseAux_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifStmtExpAux_ == child)
        {
            this._ifStmtExpAux_ = null;
            return;
        }

        if(this._tkReservedThen_ == child)
        {
            this._tkReservedThen_ = null;
            return;
        }

        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._ifStmtElseAux_ == child)
        {
            this._ifStmtElseAux_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifStmtExpAux_ == oldChild)
        {
            setIfStmtExpAux((PIfStmtExpAux) newChild);
            return;
        }

        if(this._tkReservedThen_ == oldChild)
        {
            setTkReservedThen((TTkReservedThen) newChild);
            return;
        }

        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        if(this._ifStmtElseAux_ == oldChild)
        {
            setIfStmtElseAux((PIfStmtElseAux) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
