/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.node;

import br.ufs.dcomp.compilers.project.nonneumann.analysis.*;

@SuppressWarnings("nls")
public final class AIdFunctionCall extends PFunctionCall
{
    private TTkId _tkId_;
    private TTkSignParOpen _tkSignParOpen_;
    private PExpList _expList_;
    private TTkSignParClose _tkSignParClose_;

    public AIdFunctionCall()
    {
        // Constructor
    }

    public AIdFunctionCall(
        @SuppressWarnings("hiding") TTkId _tkId_,
        @SuppressWarnings("hiding") TTkSignParOpen _tkSignParOpen_,
        @SuppressWarnings("hiding") PExpList _expList_,
        @SuppressWarnings("hiding") TTkSignParClose _tkSignParClose_)
    {
        // Constructor
        setTkId(_tkId_);

        setTkSignParOpen(_tkSignParOpen_);

        setExpList(_expList_);

        setTkSignParClose(_tkSignParClose_);

    }

    @Override
    public Object clone()
    {
        return new AIdFunctionCall(
            cloneNode(this._tkId_),
            cloneNode(this._tkSignParOpen_),
            cloneNode(this._expList_),
            cloneNode(this._tkSignParClose_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdFunctionCall(this);
    }

    public TTkId getTkId()
    {
        return this._tkId_;
    }

    public void setTkId(TTkId node)
    {
        if(this._tkId_ != null)
        {
            this._tkId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkId_ = node;
    }

    public TTkSignParOpen getTkSignParOpen()
    {
        return this._tkSignParOpen_;
    }

    public void setTkSignParOpen(TTkSignParOpen node)
    {
        if(this._tkSignParOpen_ != null)
        {
            this._tkSignParOpen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkSignParOpen_ = node;
    }

    public PExpList getExpList()
    {
        return this._expList_;
    }

    public void setExpList(PExpList node)
    {
        if(this._expList_ != null)
        {
            this._expList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expList_ = node;
    }

    public TTkSignParClose getTkSignParClose()
    {
        return this._tkSignParClose_;
    }

    public void setTkSignParClose(TTkSignParClose node)
    {
        if(this._tkSignParClose_ != null)
        {
            this._tkSignParClose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkSignParClose_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tkId_)
            + toString(this._tkSignParOpen_)
            + toString(this._expList_)
            + toString(this._tkSignParClose_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tkId_ == child)
        {
            this._tkId_ = null;
            return;
        }

        if(this._tkSignParOpen_ == child)
        {
            this._tkSignParOpen_ = null;
            return;
        }

        if(this._expList_ == child)
        {
            this._expList_ = null;
            return;
        }

        if(this._tkSignParClose_ == child)
        {
            this._tkSignParClose_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tkId_ == oldChild)
        {
            setTkId((TTkId) newChild);
            return;
        }

        if(this._tkSignParOpen_ == oldChild)
        {
            setTkSignParOpen((TTkSignParOpen) newChild);
            return;
        }

        if(this._expList_ == oldChild)
        {
            setExpList((PExpList) newChild);
            return;
        }

        if(this._tkSignParClose_ == oldChild)
        {
            setTkSignParClose((TTkSignParClose) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
