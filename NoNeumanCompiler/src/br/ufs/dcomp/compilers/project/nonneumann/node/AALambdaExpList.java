/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.node;

import java.util.*;
import br.ufs.dcomp.compilers.project.nonneumann.analysis.*;

@SuppressWarnings("nls")
public final class AALambdaExpList extends PALambdaExpList
{
    private PAExp _aExp_;
    private final LinkedList<PALambdaExpListAux> _aLambdaExpListAux_ = new LinkedList<PALambdaExpListAux>();

    public AALambdaExpList()
    {
        // Constructor
    }

    public AALambdaExpList(
        @SuppressWarnings("hiding") PAExp _aExp_,
        @SuppressWarnings("hiding") List<?> _aLambdaExpListAux_)
    {
        // Constructor
        setAExp(_aExp_);

        setALambdaExpListAux(_aLambdaExpListAux_);

    }

    @Override
    public Object clone()
    {
        return new AALambdaExpList(
            cloneNode(this._aExp_),
            cloneList(this._aLambdaExpListAux_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAALambdaExpList(this);
    }

    public PAExp getAExp()
    {
        return this._aExp_;
    }

    public void setAExp(PAExp node)
    {
        if(this._aExp_ != null)
        {
            this._aExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aExp_ = node;
    }

    public LinkedList<PALambdaExpListAux> getALambdaExpListAux()
    {
        return this._aLambdaExpListAux_;
    }

    public void setALambdaExpListAux(List<?> list)
    {
        for(PALambdaExpListAux e : this._aLambdaExpListAux_)
        {
            e.parent(null);
        }
        this._aLambdaExpListAux_.clear();

        for(Object obj_e : list)
        {
            PALambdaExpListAux e = (PALambdaExpListAux) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aLambdaExpListAux_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aExp_)
            + toString(this._aLambdaExpListAux_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aExp_ == child)
        {
            this._aExp_ = null;
            return;
        }

        if(this._aLambdaExpListAux_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aExp_ == oldChild)
        {
            setAExp((PAExp) newChild);
            return;
        }

        for(ListIterator<PALambdaExpListAux> i = this._aLambdaExpListAux_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PALambdaExpListAux) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
