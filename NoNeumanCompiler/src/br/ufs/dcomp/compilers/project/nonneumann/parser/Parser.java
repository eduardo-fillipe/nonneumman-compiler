/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.parser;

import br.ufs.dcomp.compilers.project.nonneumann.lexer.*;
import br.ufs.dcomp.compilers.project.nonneumann.node.*;
import br.ufs.dcomp.compilers.project.nonneumann.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAProgram node1 = (PAProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAfunctiondec1FunctionDec */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAfunctiondec2FunctionDec */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAparametersfunctionaux1ParametersFunctionAux */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAparametersfunctionaux2ParametersFunctionAux */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AExpFunctionAux */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ASignature */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AAlambda1Lambda */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list);
            }
            break;
            case 8: /* reduce AAlambda2Lambda */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AAlambda3Lambda */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce AAlambda4Lambda */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce ADecConsDecCons */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AAlambdaexplist1LambdaExpList */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AAlambdaexplist2LambdaExpList */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce ATkReservedTypeIntType */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce ATkReservedTypeBoolType */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ATkReservedTypeRealType */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce ALambdaExpListAux */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce ATkReservedBoolTrueBooleanValue */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list);
            }
            break;
            case 19: /* reduce ATkReservedBoolFalseBooleanValue */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AParameters */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AParametersAux */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list);
            }
            break;
            case 22: /* reduce ALiteralTerm */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list);
            }
            break;
            case 23: /* reduce AFunctionCallTerm */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list);
            }
            break;
            case 24: /* reduce AAexpterm1Term */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce AAexpterm2Term */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce ADecParameter */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce ASignatureParameter */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list);
            }
            break;
            case 28: /* reduce ATypeParameterSignature */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce ASignatureParameterSignature */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list);
            }
            break;
            case 30: /* reduce AParametersSignatureAux */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce AAparameterssignature1ParametersSignature */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce AAparameterssignature2ParametersSignature */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list);
            }
            break;
            case 33: /* reduce AIfStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(18), list);
            }
            break;
            case 34: /* reduce AAidlist1IdList */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list);
            }
            break;
            case 35: /* reduce AAidlist2IdList */
            {
                ArrayList<Object> list = new35();
                push(goTo(19), list);
            }
            break;
            case 36: /* reduce AIdListAux */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list);
            }
            break;
            case 37: /* reduce AFactorOp */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list);
            }
            break;
            case 38: /* reduce APlusOp */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list);
            }
            break;
            case 39: /* reduce AMinusOp */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list);
            }
            break;
            case 40: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new40();
                push(goTo(22), list);
            }
            break;
            case 41: /* reduce AMultFactor */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list);
            }
            break;
            case 42: /* reduce ANegFactor */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list);
            }
            break;
            case 43: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list);
            }
            break;
            case 44: /* reduce AModFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(22), list);
            }
            break;
            case 45: /* reduce ANegation */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list);
            }
            break;
            case 46: /* reduce ABooleanValueLiteral */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list);
            }
            break;
            case 47: /* reduce ANumeralFloatLiteral */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list);
            }
            break;
            case 48: /* reduce ANumeralIntLiteral */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list);
            }
            break;
            case 49: /* reduce AGtExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list);
            }
            break;
            case 50: /* reduce ALtExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list);
            }
            break;
            case 51: /* reduce AEqualExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list);
            }
            break;
            case 52: /* reduce ANegBoolExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list);
            }
            break;
            case 53: /* reduce AAndExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce AOrExp */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list);
            }
            break;
            case 55: /* reduce AIfStmtExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list);
            }
            break;
            case 56: /* reduce ALambdaExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list);
            }
            break;
            case 57: /* reduce AOpExp */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list);
            }
            break;
            case 58: /* reduce AIfStmtExpAux */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list);
            }
            break;
            case 59: /* reduce AIfStmtElseAux */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list);
            }
            break;
            case 60: /* reduce ATkNumberFloatNumeralFloat */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list);
            }
            break;
            case 61: /* reduce ATkNumberFloatCientificNotationNumeralFloat */
            {
                ArrayList<Object> list = new61();
                push(goTo(28), list);
            }
            break;
            case 62: /* reduce ATkNumberIntegerDecNumeralInt */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list);
            }
            break;
            case 63: /* reduce ATkNumberIntegerHexNumeralInt */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list);
            }
            break;
            case 64: /* reduce AAidfunctioncall1FunctionCall */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list);
            }
            break;
            case 65: /* reduce AAidfunctioncall2FunctionCall */
            {
                ArrayList<Object> list = new65();
                push(goTo(30), list);
            }
            break;
            case 66: /* reduce AAexplistexplist1ExpList */
            {
                ArrayList<Object> list = new66();
                push(goTo(31), list);
            }
            break;
            case 67: /* reduce AAexplistexplist2ExpList */
            {
                ArrayList<Object> list = new67();
                push(goTo(31), list);
            }
            break;
            case 68: /* reduce AExpListAuxExpListAux */
            {
                ArrayList<Object> list = new68();
                push(goTo(32), list);
            }
            break;
            case 69: /* reduce ATerminal$FunctionDec */
            {
                ArrayList<Object> list = new69();
                push(goTo(33), list);
            }
            break;
            case 70: /* reduce ANonTerminal$FunctionDec */
            {
                ArrayList<Object> list = new70();
                push(goTo(33), list);
            }
            break;
            case 71: /* reduce ATerminal$Parameters */
            {
                ArrayList<Object> list = new71();
                push(goTo(34), list);
            }
            break;
            case 72: /* reduce ANonTerminal$Parameters */
            {
                ArrayList<Object> list = new72();
                push(goTo(34), list);
            }
            break;
            case 73: /* reduce ATerminal$LambdaExpListAux */
            {
                ArrayList<Object> list = new73();
                push(goTo(35), list);
            }
            break;
            case 74: /* reduce ANonTerminal$LambdaExpListAux */
            {
                ArrayList<Object> list = new74();
                push(goTo(35), list);
            }
            break;
            case 75: /* reduce ATerminal$DecCons */
            {
                ArrayList<Object> list = new75();
                push(goTo(36), list);
            }
            break;
            case 76: /* reduce ANonTerminal$DecCons */
            {
                ArrayList<Object> list = new76();
                push(goTo(36), list);
            }
            break;
            case 77: /* reduce ATerminal$ParametersSignatureAux */
            {
                ArrayList<Object> list = new77();
                push(goTo(37), list);
            }
            break;
            case 78: /* reduce ANonTerminal$ParametersSignatureAux */
            {
                ArrayList<Object> list = new78();
                push(goTo(37), list);
            }
            break;
            case 79: /* reduce ATerminal$IdListAux */
            {
                ArrayList<Object> list = new79();
                push(goTo(38), list);
            }
            break;
            case 80: /* reduce ANonTerminal$IdListAux */
            {
                ArrayList<Object> list = new80();
                push(goTo(38), list);
            }
            break;
            case 81: /* reduce ATerminal$ExpListAux */
            {
                ArrayList<Object> list = new81();
                push(goTo(39), list);
            }
            break;
            case 82: /* reduce ANonTerminal$ExpListAux */
            {
                ArrayList<Object> list = new82();
                push(goTo(39), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAProgram paprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        paprogramNode1 = new AAProgram(listNode3);
        }
	nodeList.add(paprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAfunctiondec1FunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFunctionDec pafunctiondecNode1;
        {
            // Block
        PAType patypeNode2;
        PAParametersFunctionAux paparametersfunctionauxNode3;
        PAExpFunctionAux paexpfunctionauxNode4;
        patypeNode2 = (PAType)nodeArrayList3.get(0);
        paparametersfunctionauxNode3 = (PAParametersFunctionAux)nodeArrayList5.get(0);
        paexpfunctionauxNode4 = (PAExpFunctionAux)nodeArrayList7.get(0);

        pafunctiondecNode1 = new AAFunctionDec(patypeNode2, paparametersfunctionauxNode3, paexpfunctionauxNode4);
        }
	nodeList.add(pafunctiondecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfunctiondec2FunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFunctionDec pafunctiondecNode1;
        {
            // Block
        PAType patypeNode2;
        PAParametersFunctionAux paparametersfunctionauxNode3;
        PAExpFunctionAux paexpfunctionauxNode4;
        patypeNode2 = (PAType)nodeArrayList4.get(0);
        paparametersfunctionauxNode3 = (PAParametersFunctionAux)nodeArrayList6.get(0);
        paexpfunctionauxNode4 = (PAExpFunctionAux)nodeArrayList8.get(0);

        pafunctiondecNode1 = new AAFunctionDec(patypeNode2, paparametersfunctionauxNode3, paexpfunctionauxNode4);
        }
	nodeList.add(pafunctiondecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAparametersfunctionaux1ParametersFunctionAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametersFunctionAux paparametersfunctionauxNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        paparametersfunctionauxNode1 = new AAParametersFunctionAux(listNode2);
        }
	nodeList.add(paparametersfunctionauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAparametersfunctionaux2ParametersFunctionAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametersFunctionAux paparametersfunctionauxNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        paparametersfunctionauxNode1 = new AAParametersFunctionAux(listNode3);
        }
	nodeList.add(paparametersfunctionauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AExpFunctionAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpFunctionAux paexpfunctionauxNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexpfunctionauxNode1 = new AAExpFunctionAux(paexpNode2);
        }
	nodeList.add(paexpfunctionauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ASignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PASignature pasignatureNode1;
        {
            // Block
        PAType patypeNode2;
        TTkId ttkidNode3;
        PAParametersSignature paparameterssignatureNode4;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        ttkidNode3 = (TTkId)nodeArrayList2.get(0);
        paparameterssignatureNode4 = (PAParametersSignature)nodeArrayList4.get(0);

        pasignatureNode1 = new AASignature(patypeNode2, ttkidNode3, paparameterssignatureNode4);
        }
	nodeList.add(pasignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAlambda1Lambda */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PAExp paexpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        paexpNode3 = (PAExp)nodeArrayList5.get(0);

        palambdaNode1 = new AALambda(null, paexpNode3, null);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAlambda2Lambda */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        PAIdList paidlistNode2;
        PAExp paexpNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        paidlistNode2 = (PAIdList)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList6.get(0);

        palambdaNode1 = new AALambda(paidlistNode2, paexpNode3, null);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAlambda3Lambda */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PAExp paexpNode3;
        PALambdaExpList palambdaexplistNode4;
        paexpNode3 = (PAExp)nodeArrayList5.get(0);
        palambdaexplistNode4 = (PALambdaExpList)nodeArrayList7.get(0);

        palambdaNode1 = new AALambda(null, paexpNode3, palambdaexplistNode4);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAlambda4Lambda */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambda palambdaNode1;
        {
            // Block
        PAIdList paidlistNode2;
        PAExp paexpNode3;
        PALambdaExpList palambdaexplistNode4;
        paidlistNode2 = (PAIdList)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList6.get(0);
        palambdaexplistNode4 = (PALambdaExpList)nodeArrayList8.get(0);

        palambdaNode1 = new AALambda(paidlistNode2, paexpNode3, palambdaexplistNode4);
        }
	nodeList.add(palambdaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADecConsDecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADecCons padecconsNode1;
        {
            // Block
        PAType patypeNode2;
        TTkId ttkidNode3;
        PAExp paexpNode4;
        patypeNode2 = (PAType)nodeArrayList3.get(0);
        ttkidNode3 = (TTkId)nodeArrayList4.get(0);
        paexpNode4 = (PAExp)nodeArrayList5.get(0);

        padecconsNode1 = new AADecCons(patypeNode2, ttkidNode3, paexpNode4);
        }
	nodeList.add(padecconsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAlambdaexplist1LambdaExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambdaExpList palambdaexplistNode1;
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        {
            // Block
        }

        palambdaexplistNode1 = new AALambdaExpList(paexpNode2, listNode3);
        }
	nodeList.add(palambdaexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAlambdaexplist2LambdaExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambdaExpList palambdaexplistNode1;
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        palambdaexplistNode1 = new AALambdaExpList(paexpNode2, listNode4);
        }
	nodeList.add(palambdaexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATkReservedTypeIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TTkReservedTypeInt ttkreservedtypeintNode2;
        ttkreservedtypeintNode2 = (TTkReservedTypeInt)nodeArrayList1.get(0);

        patypeNode1 = new ATkReservedTypeIntAType(ttkreservedtypeintNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATkReservedTypeBoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TTkReservedTypeBool ttkreservedtypeboolNode2;
        ttkreservedtypeboolNode2 = (TTkReservedTypeBool)nodeArrayList1.get(0);

        patypeNode1 = new ATkReservedTypeBoolAType(ttkreservedtypeboolNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATkReservedTypeRealType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAType patypeNode1;
        {
            // Block
        TTkReservedTypeReal ttkreservedtyperealNode2;
        ttkreservedtyperealNode2 = (TTkReservedTypeReal)nodeArrayList1.get(0);

        patypeNode1 = new ATkReservedTypeRealAType(ttkreservedtyperealNode2);
        }
	nodeList.add(patypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ALambdaExpListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALambdaExpListAux palambdaexplistauxNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        palambdaexplistauxNode1 = new AALambdaExpListAux(paexpNode2);
        }
	nodeList.add(palambdaexplistauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ATkReservedBoolTrueBooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABooleanValue pabooleanvalueNode1;
        {
            // Block
        TTkReservedBoolTrue ttkreservedbooltrueNode2;
        ttkreservedbooltrueNode2 = (TTkReservedBoolTrue)nodeArrayList1.get(0);

        pabooleanvalueNode1 = new ATkReservedBoolTrueABooleanValue(ttkreservedbooltrueNode2);
        }
	nodeList.add(pabooleanvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ATkReservedBoolFalseBooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABooleanValue pabooleanvalueNode1;
        {
            // Block
        TTkReservedBoolFalse ttkreservedboolfalseNode2;
        ttkreservedboolfalseNode2 = (TTkReservedBoolFalse)nodeArrayList1.get(0);

        pabooleanvalueNode1 = new ATkReservedBoolFalseABooleanValue(ttkreservedboolfalseNode2);
        }
	nodeList.add(pabooleanvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParameters paparametersNode1;
        {
            // Block
        PAParameter paparameterNode2;
        PAParametersAux paparametersauxNode3;
        paparameterNode2 = (PAParameter)nodeArrayList1.get(0);
        paparametersauxNode3 = (PAParametersAux)nodeArrayList2.get(0);

        paparametersNode1 = new AAParameters(paparameterNode2, paparametersauxNode3);
        }
	nodeList.add(paparametersNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AParametersAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametersAux paparametersauxNode1;
        {
            // Block
        PAParameter paparameterNode2;
        paparameterNode2 = (PAParameter)nodeArrayList2.get(0);

        paparametersauxNode1 = new AAParametersAux(paparameterNode2);
        }
	nodeList.add(paparametersauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ALiteralTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PALiteral paliteralNode2;
        paliteralNode2 = (PALiteral)nodeArrayList1.get(0);

        paexpNode1 = new AALiteralAExp(paliteralNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFunctionCallTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAFunctionCall pafunctioncallNode2;
        pafunctioncallNode2 = (PAFunctionCall)nodeArrayList1.get(0);

        paexpNode1 = new AAFunctionCallAExp(pafunctioncallNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAexpterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PAExp paexpNode3;
        {
            // Block
        }
        paexpNode3 = (PAExp)nodeArrayList2.get(0);

        paexpNode1 = new AAExpBlocAExp(listNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAexpterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAExp paexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        paexpNode4 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpBlocAExp(listNode3, paexpNode4);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADecParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParameter paparameterNode1;
        {
            // Block
        PAType patypeNode2;
        TTkId ttkidNode3;
        patypeNode2 = (PAType)nodeArrayList1.get(0);
        ttkidNode3 = (TTkId)nodeArrayList2.get(0);

        paparameterNode1 = new ADecAParameter(patypeNode2, ttkidNode3);
        }
	nodeList.add(paparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASignatureParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParameter paparameterNode1;
        {
            // Block
        PASignature pasignatureNode2;
        pasignatureNode2 = (PASignature)nodeArrayList1.get(0);

        paparameterNode1 = new ASignatureAParameter(pasignatureNode2);
        }
	nodeList.add(paparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ATypeParameterSignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParameterSignature paparametersignatureNode1;
        {
            // Block
        PAType patypeNode2;
        patypeNode2 = (PAType)nodeArrayList1.get(0);

        paparametersignatureNode1 = new ATypeAParameterSignature(patypeNode2);
        }
	nodeList.add(paparametersignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASignatureParameterSignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParameterSignature paparametersignatureNode1;
        {
            // Block
        PASignature pasignatureNode2;
        pasignatureNode2 = (PASignature)nodeArrayList1.get(0);

        paparametersignatureNode1 = new ASignatureAParameterSignature(pasignatureNode2);
        }
	nodeList.add(paparametersignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParametersSignatureAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametersSignatureAux paparameterssignatureauxNode1;
        {
            // Block
        PAParameterSignature paparametersignatureNode2;
        paparametersignatureNode2 = (PAParameterSignature)nodeArrayList2.get(0);

        paparameterssignatureauxNode1 = new AAParametersSignatureAux(paparametersignatureNode2);
        }
	nodeList.add(paparameterssignatureauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAparameterssignature1ParametersSignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametersSignature paparameterssignatureNode1;
        {
            // Block
        PAParameterSignature paparametersignatureNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        paparametersignatureNode2 = (PAParameterSignature)nodeArrayList1.get(0);
        {
            // Block
        }

        paparameterssignatureNode1 = new AAParametersSignature(paparametersignatureNode2, listNode3);
        }
	nodeList.add(paparameterssignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAparameterssignature2ParametersSignature */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParametersSignature paparameterssignatureNode1;
        {
            // Block
        PAParameterSignature paparametersignatureNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        paparametersignatureNode2 = (PAParameterSignature)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paparameterssignatureNode1 = new AAParametersSignature(paparametersignatureNode2, listNode4);
        }
	nodeList.add(paparameterssignatureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        PAExp paexpNode4;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);
        paexpNode4 = (PAExp)nodeArrayList4.get(0);

        paexpNode1 = new AAIfStmtAExp(paexpNode2, paexpNode3, paexpNode4);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAidlist1IdList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAIdList paidlistNode1;
        {
            // Block
        TTkId ttkidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        ttkidNode2 = (TTkId)nodeArrayList1.get(0);
        {
            // Block
        }

        paidlistNode1 = new AAIdList(ttkidNode2, listNode3);
        }
	nodeList.add(paidlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAidlist2IdList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAIdList paidlistNode1;
        {
            // Block
        TTkId ttkidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ttkidNode2 = (TTkId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paidlistNode1 = new AAIdList(ttkidNode2, listNode4);
        }
	nodeList.add(paidlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIdListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAIdListAux paidlistauxNode1;
        {
            // Block
        TTkId ttkidNode2;
        ttkidNode2 = (TTkId)nodeArrayList2.get(0);

        paidlistauxNode1 = new AAIdListAux(ttkidNode2);
        }
	nodeList.add(paidlistauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AFactorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce APlusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAPlusAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMinusAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAMultAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANegFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);

        paexpNode1 = new AANegationAExp(paexpNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AADivAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAModAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANegation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexpNode1 = new AANegationAExp(paexpNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ABooleanValueLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALiteral paliteralNode1;
        {
            // Block
        PABooleanValue pabooleanvalueNode2;
        pabooleanvalueNode2 = (PABooleanValue)nodeArrayList1.get(0);

        paliteralNode1 = new AABooleanValueALiteral(pabooleanvalueNode2);
        }
	nodeList.add(paliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANumeralFloatLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALiteral paliteralNode1;
        {
            // Block
        PANumeralFloat panumeralfloatNode2;
        panumeralfloatNode2 = (PANumeralFloat)nodeArrayList1.get(0);

        paliteralNode1 = new AANumeralFloatALiteral(panumeralfloatNode2);
        }
	nodeList.add(paliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ANumeralIntLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALiteral paliteralNode1;
        {
            // Block
        PANumeralInt panumeralintNode2;
        panumeralintNode2 = (PANumeralInt)nodeArrayList1.get(0);

        paliteralNode1 = new AANumeralIntALiteral(panumeralintNode2);
        }
	nodeList.add(paliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AGtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAGtAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ALtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AALtAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAEqualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ANegBoolExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexpNode1 = new AANegationAExp(paexpNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAAndAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAOrAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AIfStmtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ALambdaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PALambda palambdaNode2;
        palambdaNode2 = (PALambda)nodeArrayList1.get(0);

        paexpNode1 = new AALambdaAExp(palambdaNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AOpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AIfStmtExpAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList2.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AIfStmtElseAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList2.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATkNumberFloatNumeralFloat */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PANumeralFloat panumeralfloatNode1;
        {
            // Block
        TTkNumberFloat ttknumberfloatNode2;
        ttknumberfloatNode2 = (TTkNumberFloat)nodeArrayList1.get(0);

        panumeralfloatNode1 = new ATkNumberFloatANumeralFloat(ttknumberfloatNode2);
        }
	nodeList.add(panumeralfloatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATkNumberFloatCientificNotationNumeralFloat */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PANumeralFloat panumeralfloatNode1;
        {
            // Block
        TTkNumberFloatCientificNotation ttknumberfloatcientificnotationNode2;
        ttknumberfloatcientificnotationNode2 = (TTkNumberFloatCientificNotation)nodeArrayList1.get(0);

        panumeralfloatNode1 = new ATkNumberFloatCientificNotationANumeralFloat(ttknumberfloatcientificnotationNode2);
        }
	nodeList.add(panumeralfloatNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATkNumberIntegerDecNumeralInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PANumeralInt panumeralintNode1;
        {
            // Block
        TTkNumberIntegerDec ttknumberintegerdecNode2;
        ttknumberintegerdecNode2 = (TTkNumberIntegerDec)nodeArrayList1.get(0);

        panumeralintNode1 = new ATkNumberIntegerDecANumeralInt(ttknumberintegerdecNode2);
        }
	nodeList.add(panumeralintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATkNumberIntegerHexNumeralInt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PANumeralInt panumeralintNode1;
        {
            // Block
        TTkNumberIntegerHex ttknumberintegerhexNode2;
        ttknumberintegerhexNode2 = (TTkNumberIntegerHex)nodeArrayList1.get(0);

        panumeralintNode1 = new ATkNumberIntegerHexANumeralInt(ttknumberintegerhexNode2);
        }
	nodeList.add(panumeralintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAidfunctioncall1FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFunctionCall pafunctioncallNode1;
        {
            // Block
        TTkId ttkidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        ttkidNode2 = (TTkId)nodeArrayList1.get(0);
        {
            // Block
        }

        pafunctioncallNode1 = new AAFunctionCall(ttkidNode2, listNode3);
        }
	nodeList.add(pafunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAidfunctioncall2FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAFunctionCall pafunctioncallNode1;
        {
            // Block
        TTkId ttkidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ttkidNode2 = (TTkId)nodeArrayList1.get(0);
        {
            // Block
        PAExpList paexplistNode3;
        paexplistNode3 = (PAExpList)nodeArrayList3.get(0);
	if(paexplistNode3 != null)
	{
	  listNode4.add(paexplistNode3);
	}
        }

        pafunctioncallNode1 = new AAFunctionCall(ttkidNode2, listNode4);
        }
	nodeList.add(pafunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAexplistexplist1ExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpList paexplistNode1;
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        {
            // Block
        }

        paexplistNode1 = new AAExpList(paexpNode2, listNode3);
        }
	nodeList.add(paexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAexplistexplist2ExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpList paexplistNode1;
        {
            // Block
        PAExp paexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        paexplistNode1 = new AAExpList(paexpNode2, listNode4);
        }
	nodeList.add(paexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AExpListAuxExpListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpListAux paexplistauxNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexplistauxNode1 = new AAExpListAux(paexpNode2);
        }
	nodeList.add(paexplistauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$FunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAFunctionDec pafunctiondecNode1;
        pafunctiondecNode1 = (PAFunctionDec)nodeArrayList1.get(0);
	if(pafunctiondecNode1 != null)
	{
	  listNode2.add(pafunctiondecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$FunctionDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAFunctionDec pafunctiondecNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pafunctiondecNode2 = (PAFunctionDec)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pafunctiondecNode2 != null)
	{
	  listNode3.add(pafunctiondecNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$Parameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAParameters paparametersNode1;
        paparametersNode1 = (PAParameters)nodeArrayList1.get(0);
	if(paparametersNode1 != null)
	{
	  listNode2.add(paparametersNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$Parameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAParameters paparametersNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paparametersNode2 = (PAParameters)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paparametersNode2 != null)
	{
	  listNode3.add(paparametersNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$LambdaExpListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PALambdaExpListAux palambdaexplistauxNode1;
        palambdaexplistauxNode1 = (PALambdaExpListAux)nodeArrayList1.get(0);
	if(palambdaexplistauxNode1 != null)
	{
	  listNode2.add(palambdaexplistauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$LambdaExpListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PALambdaExpListAux palambdaexplistauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        palambdaexplistauxNode2 = (PALambdaExpListAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(palambdaexplistauxNode2 != null)
	{
	  listNode3.add(palambdaexplistauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$DecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADecCons padecconsNode1;
        padecconsNode1 = (PADecCons)nodeArrayList1.get(0);
	if(padecconsNode1 != null)
	{
	  listNode2.add(padecconsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$DecCons */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADecCons padecconsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padecconsNode2 = (PADecCons)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padecconsNode2 != null)
	{
	  listNode3.add(padecconsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATerminal$ParametersSignatureAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAParametersSignatureAux paparameterssignatureauxNode1;
        paparameterssignatureauxNode1 = (PAParametersSignatureAux)nodeArrayList1.get(0);
	if(paparameterssignatureauxNode1 != null)
	{
	  listNode2.add(paparameterssignatureauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANonTerminal$ParametersSignatureAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAParametersSignatureAux paparameterssignatureauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paparameterssignatureauxNode2 = (PAParametersSignatureAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paparameterssignatureauxNode2 != null)
	{
	  listNode3.add(paparameterssignatureauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$IdListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAIdListAux paidlistauxNode1;
        paidlistauxNode1 = (PAIdListAux)nodeArrayList1.get(0);
	if(paidlistauxNode1 != null)
	{
	  listNode2.add(paidlistauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$IdListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAIdListAux paidlistauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paidlistauxNode2 = (PAIdListAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paidlistauxNode2 != null)
	{
	  listNode3.add(paidlistauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$ExpListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAExpListAux paexplistauxNode1;
        paexplistauxNode1 = (PAExpListAux)nodeArrayList1.get(0);
	if(paexplistauxNode1 != null)
	{
	  listNode2.add(paexplistauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$ExpListAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAExpListAux paexplistauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paexplistauxNode2 = (PAExpListAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paexplistauxNode2 != null)
	{
	  listNode3.add(paexplistauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {26, SHIFT, 2}, },
			{{-1, ERROR, 1}, {26, SHIFT, 6}, },
			{{-1, ERROR, 2}, {1, SHIFT, 7}, },
			{{-1, ERROR, 3}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {26, SHIFT, 2}, },
			{{-1, ERROR, 6}, {1, SHIFT, 9}, },
			{{-1, ERROR, 7}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 9}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 13}, {33, SHIFT, 15}, },
			{{-1, ERROR, 14}, {33, SHIFT, 16}, },
			{{-1, ERROR, 15}, {26, SHIFT, 17}, },
			{{-1, ERROR, 16}, {26, SHIFT, 17}, },
			{{-1, ERROR, 17}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, {27, SHIFT, 20}, },
			{{-1, ERROR, 18}, {23, SHIFT, 26}, },
			{{-1, ERROR, 19}, {23, SHIFT, 27}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 22}, {33, SHIFT, 28}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 24}, {24, SHIFT, 29}, },
			{{-1, ERROR, 25}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, {27, SHIFT, 31}, },
			{{-1, ERROR, 26}, {26, SHIFT, 33}, },
			{{-1, ERROR, 27}, {26, SHIFT, 33}, },
			{{-1, REDUCE, 26}, {26, SHIFT, 36}, },
			{{-1, ERROR, 29}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 33}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 34}, {27, SHIFT, 63}, },
			{{-1, ERROR, 35}, {27, SHIFT, 64}, },
			{{-1, ERROR, 36}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 40}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 41}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 46}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 47}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 48}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 73}, {33, SHIFT, 49}, },
			{{-1, ERROR, 49}, {26, SHIFT, 77}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 57}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 37}, {20, SHIFT, 80}, {21, SHIFT, 81}, {22, SHIFT, 82}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 58}, {8, SHIFT, 83}, {9, SHIFT, 84}, {27, SHIFT, 85}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, ERROR, 59}, {11, SHIFT, 89}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 28}, {33, SHIFT, 90}, },
			{{-1, REDUCE, 31}, {24, SHIFT, 91}, },
			{{-1, ERROR, 68}, {27, SHIFT, 94}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 70}, {27, SHIFT, 95}, {33, SHIFT, 96}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 52}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, ERROR, 73}, {2, SHIFT, 98}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 73}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 75}, {8, SHIFT, 83}, {9, SHIFT, 84}, {27, SHIFT, 99}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, ERROR, 76}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 73}, {33, SHIFT, 49}, },
			{{-1, ERROR, 77}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {27, SHIFT, 102}, {33, SHIFT, 49}, },
			{{-1, ERROR, 78}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 79}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 80}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 81}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 82}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 83}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 84}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 86}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 87}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 88}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 89}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 90}, {26, SHIFT, 36}, },
			{{-1, ERROR, 91}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 32}, {24, SHIFT, 91}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 95}, {23, SHIFT, 118}, },
			{{-1, REDUCE, 34}, {24, SHIFT, 119}, },
			{{-1, ERROR, 97}, {27, SHIFT, 122}, },
			{{-1, ERROR, 98}, {3, SHIFT, 10}, {4, SHIFT, 11}, {5, SHIFT, 12}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 101}, {8, SHIFT, 83}, {9, SHIFT, 84}, {27, SHIFT, 124}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, {8, SHIFT, 83}, {9, SHIFT, 84}, {24, SHIFT, 125}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, ERROR, 104}, {27, SHIFT, 128}, },
			{{-1, REDUCE, 38}, {20, SHIFT, 80}, {21, SHIFT, 81}, {22, SHIFT, 82}, },
			{{-1, REDUCE, 39}, {20, SHIFT, 80}, {21, SHIFT, 81}, {22, SHIFT, 82}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 53}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 54}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 51}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 49}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, REDUCE, 50}, {18, SHIFT, 78}, {19, SHIFT, 79}, },
			{{-1, ERROR, 115}, {12, SHIFT, 129}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 118}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 119}, {33, SHIFT, 132}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 35}, {24, SHIFT, 119}, },
			{{-1, ERROR, 122}, {23, SHIFT, 134}, },
			{{-1, ERROR, 123}, {33, SHIFT, 135}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 125}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 67}, {24, SHIFT, 125}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 129}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 131}, {28, SHIFT, 139}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 134}, {6, SHIFT, 38}, {7, SHIFT, 39}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, ERROR, 135}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 68}, {8, SHIFT, 83}, {9, SHIFT, 84}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 139}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {29, SHIFT, 142}, {33, SHIFT, 49}, },
			{{-1, ERROR, 140}, {28, SHIFT, 145}, },
			{{-1, ERROR, 141}, {8, SHIFT, 83}, {9, SHIFT, 84}, {27, SHIFT, 146}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 143}, {29, SHIFT, 147}, },
			{{-1, REDUCE, 12}, {8, SHIFT, 83}, {9, SHIFT, 84}, {24, SHIFT, 148}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, ERROR, 145}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {29, SHIFT, 151}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 148}, {6, SHIFT, 38}, {7, SHIFT, 39}, {10, SHIFT, 40}, {13, SHIFT, 41}, {14, SHIFT, 42}, {15, SHIFT, 43}, {16, SHIFT, 44}, {17, SHIFT, 45}, {19, SHIFT, 46}, {25, SHIFT, 47}, {26, SHIFT, 48}, {33, SHIFT, 49}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 13}, {24, SHIFT, 148}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 152}, {29, SHIFT, 155}, },
			{{-1, REDUCE, 17}, {8, SHIFT, 83}, {9, SHIFT, 84}, {30, SHIFT, 86}, {31, SHIFT, 87}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {5, 8}, },
			{{-1, 18}, {16, 19}, },
			{{-1, 34}, {27, 35}, },
			{{-1, 21}, {36, 65}, {91, 65}, },
			{{-1, 50}, },
			{{-1, 74}, {76, 100}, },
			{{-1, 143}, {145, 152}, },
			{{-1, 22}, {7, 13}, {9, 14}, {36, 66}, {91, 66}, {98, 123}, },
			{{-1, 149}, {150, 154}, },
			{{-1, 51}, },
			{{-1, 23}, {25, 32}, },
			{{-1, 30}, },
			{{-1, 52}, {40, 69}, {46, 71}, {80, 107}, {81, 108}, {82, 109}, {89, 115}, {118, 131}, {129, 138}, {134, 140}, },
			{{-1, 24}, {29, 37}, },
			{{-1, 67}, {91, 116}, },
			{{-1, 92}, {93, 117}, },
			{{-1, 68}, },
			{{-1, 53}, },
			{{-1, 97}, },
			{{-1, 120}, {121, 133}, },
			{{-1, 54}, {47, 72}, {83, 110}, {84, 111}, {86, 112}, {87, 113}, {88, 114}, },
			{{-1, 55}, {78, 105}, {79, 106}, },
			{{-1, 56}, },
			{{-1, 57}, },
			{{-1, 75}, {33, 58}, {76, 101}, {77, 103}, {125, 136}, {135, 141}, {139, 144}, {145, 144}, {148, 153}, },
			{{-1, 59}, },
			{{-1, 130}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 62}, },
			{{-1, 104}, },
			{{-1, 126}, {127, 137}, },
			{{-1, 5}, },
			{{-1, 25}, },
			{{-1, 150}, },
			{{-1, 76}, },
			{{-1, 93}, },
			{{-1, 121}, },
			{{-1, 127}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entry', '('",
			"expecting: '('",
			"expecting: 'function'",
			"expecting: EOF",
			"expecting: 'entry', '(', EOF",
			"expecting: 'int', 'bool', 'real'",
			"expecting: ',', ')', tk id",
			"expecting: tk id",
			"expecting: 'int', 'bool', 'real', ')'",
			"expecting: ':'",
			"expecting: 'int', 'bool', 'real', ',', ')'",
			"expecting: ','",
			"expecting: 'int', 'bool', 'real', ',', '(', ')'",
			"expecting: 'true', 'false', 'if', 'lambda', tk number integer dec, tk number integer hex, tk number float, tk number float cientific notation, '-', '!', '(', tk id",
			"expecting: ')'",
			"expecting: 'and', 'or', 'then', 'else', '+', '-', '*', '/', '%', ',', ')', '[', ']', '=', '>', '<'",
			"expecting: 'true', 'false', tk number integer dec, tk number integer hex, tk number float, tk number float cientific notation, '(', tk id",
			"expecting: 'true', 'false', tk number integer dec, tk number integer hex, tk number float, tk number float cientific notation, '-', '(', tk id",
			"expecting: 'and', 'or', ',', ')', ']', '=', '>', '<'",
			"expecting: 'and', 'or', '+', '-', '*', '/', '%', ',', ')', ']', '=', '>', '<'",
			"expecting: 'and', 'or', '+', '-', ',', ')', ']', '=', '>', '<'",
			"expecting: 'and', 'or', ')', '=', '>', '<'",
			"expecting: 'then'",
			"expecting: ',', ')'",
			"expecting: ')', tk id",
			"expecting: 'const', 'true', 'false', 'if', 'lambda', tk number integer dec, tk number integer hex, tk number float, tk number float cientific notation, '-', '!', '(', tk id",
			"expecting: 'true', 'false', 'if', 'lambda', tk number integer dec, tk number integer hex, tk number float, tk number float cientific notation, '-', '!', '(', ')', tk id",
			"expecting: 'and', 'or', ',', ')', '=', '>', '<'",
			"expecting: 'else'",
			"expecting: '['",
			"expecting: 'true', 'false', 'if', 'lambda', tk number integer dec, tk number integer hex, tk number float, tk number float cientific notation, '-', '!', '(', ']', tk id",
			"expecting: ']'",
			"expecting: 'and', 'or', ',', ']', '=', '>', '<'",
			"expecting: ',', ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 2, 5, 4, 5, 6, 6, 6, 7, 7, 1, 1, 8, 9, 9, 9, 10, 7, 8, 11, 8, 1, 1, 12, 5, 8, 9, 8, 13, 14, 14, 5, 8, 15, 15, 16, 1, 15, 15, 15, 15, 16, 17, 13, 1, 18, 15, 19, 18, 20, 19, 19, 15, 21, 22, 15, 15, 15, 4, 4, 23, 6, 23, 14, 22, 24, 19, 20, 25, 13, 21, 13, 26, 17, 17, 16, 16, 16, 17, 17, 14, 17, 17, 17, 16, 1, 5, 23, 23, 10, 9, 23, 14, 5, 15, 13, 21, 15, 27, 14, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 28, 23, 23, 16, 7, 23, 23, 9, 7, 15, 13, 23, 23, 15, 16, 18, 29, 23, 23, 16, 13, 27, 23, 18, 30, 29, 21, 18, 31, 32, 30, 13, 18, 13, 33, 33, 18, 31, 32, 33, 18, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
