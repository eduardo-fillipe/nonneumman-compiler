/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.analysis;

import br.ufs.dcomp.compilers.project.nonneumann.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunctionDec(AFunctionDec node);
    void caseAParametersFunctionAux(AParametersFunctionAux node);
    void caseAExpFunctionAux(AExpFunctionAux node);
    void caseASignature(ASignature node);
    void caseALambda(ALambda node);
    void caseADecConsDecCons(ADecConsDecCons node);
    void caseAParametersSignatureAux(AParametersSignatureAux node);
    void caseALambdaExpList(ALambdaExpList node);
    void caseATkReservedTypeIntType(ATkReservedTypeIntType node);
    void caseATkReservedTypeBoolType(ATkReservedTypeBoolType node);
    void caseATkReservedTypeRealType(ATkReservedTypeRealType node);
    void caseALambdaExpListAux(ALambdaExpListAux node);
    void caseATkReservedBoolTrueBooleanValue(ATkReservedBoolTrueBooleanValue node);
    void caseATkReservedBoolFalseBooleanValue(ATkReservedBoolFalseBooleanValue node);
    void caseAParameters(AParameters node);
    void caseAParametersAux(AParametersAux node);
    void caseALiteralTerm(ALiteralTerm node);
    void caseAFunctionCallTerm(AFunctionCallTerm node);
    void caseAExpTerm(AExpTerm node);
    void caseADecParameter(ADecParameter node);
    void caseASignatureParameter(ASignatureParameter node);
    void caseATypeParameterSignature(ATypeParameterSignature node);
    void caseASignatureParameterSignature(ASignatureParameterSignature node);
    void caseAIfStmt(AIfStmt node);
    void caseAParametersSignature(AParametersSignature node);
    void caseAIdList(AIdList node);
    void caseAIdListAux(AIdListAux node);
    void caseAFactorOp(AFactorOp node);
    void caseAPlusOp(APlusOp node);
    void caseAMinusOp(AMinusOp node);
    void caseATermFactor(ATermFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseANegFactor(ANegFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseANegation(ANegation node);
    void caseABooleanValueLiteral(ABooleanValueLiteral node);
    void caseANumeralFloatLiteral(ANumeralFloatLiteral node);
    void caseANumeralIntLiteral(ANumeralIntLiteral node);
    void caseAGtExp(AGtExp node);
    void caseALtExp(ALtExp node);
    void caseAEqualExp(AEqualExp node);
    void caseANegBoolExp(ANegBoolExp node);
    void caseAAndExp(AAndExp node);
    void caseAOrExp(AOrExp node);
    void caseAIfStmtExp(AIfStmtExp node);
    void caseALambdaExp(ALambdaExp node);
    void caseAOpExp(AOpExp node);
    void caseAIfStmtExpAux(AIfStmtExpAux node);
    void caseAIfStmtElseAux(AIfStmtElseAux node);
    void caseATkNumberFloatNumeralFloat(ATkNumberFloatNumeralFloat node);
    void caseATkNumberFloatCientificNotationNumeralFloat(ATkNumberFloatCientificNotationNumeralFloat node);
    void caseATkNumberIntegerDecNumeralInt(ATkNumberIntegerDecNumeralInt node);
    void caseATkNumberIntegerHexNumeralInt(ATkNumberIntegerHexNumeralInt node);
    void caseAIdFunctionCall(AIdFunctionCall node);
    void caseAExpListExpList(AExpListExpList node);
    void caseAExpListAuxExpListAux(AExpListAuxExpListAux node);

    void caseTTkCommentLine(TTkCommentLine node);
    void caseTTkCommentMultiLine(TTkCommentMultiLine node);
    void caseTTkReservedEntry(TTkReservedEntry node);
    void caseTTkReservedFunction(TTkReservedFunction node);
    void caseTTkReservedConst(TTkReservedConst node);
    void caseTTkReservedTypeInt(TTkReservedTypeInt node);
    void caseTTkReservedTypeBool(TTkReservedTypeBool node);
    void caseTTkReservedTypeReal(TTkReservedTypeReal node);
    void caseTTkReservedBoolTrue(TTkReservedBoolTrue node);
    void caseTTkReservedBoolFalse(TTkReservedBoolFalse node);
    void caseTTkReservedBoolAnd(TTkReservedBoolAnd node);
    void caseTTkReservedBoolOr(TTkReservedBoolOr node);
    void caseTTkReservedIf(TTkReservedIf node);
    void caseTTkReservedThen(TTkReservedThen node);
    void caseTTkReservedElse(TTkReservedElse node);
    void caseTTkReservedLambda(TTkReservedLambda node);
    void caseTTkNumberIntegerDec(TTkNumberIntegerDec node);
    void caseTTkNumberIntegerHex(TTkNumberIntegerHex node);
    void caseTTkNumberFloat(TTkNumberFloat node);
    void caseTTkNumberFloatCientificNotation(TTkNumberFloatCientificNotation node);
    void caseTTkSignPlus(TTkSignPlus node);
    void caseTTkSignMinus(TTkSignMinus node);
    void caseTTkSignMult(TTkSignMult node);
    void caseTTkSignDiv(TTkSignDiv node);
    void caseTTkSignMod(TTkSignMod node);
    void caseTTkSignColon(TTkSignColon node);
    void caseTTkSignComma(TTkSignComma node);
    void caseTTkSignExclamation(TTkSignExclamation node);
    void caseTTkSignParOpen(TTkSignParOpen node);
    void caseTTkSignParClose(TTkSignParClose node);
    void caseTTkSignBraceOpen(TTkSignBraceOpen node);
    void caseTTkSignBraceClose(TTkSignBraceClose node);
    void caseTTkSignBoolEqual(TTkSignBoolEqual node);
    void caseTTkSignBoolGt(TTkSignBoolGt node);
    void caseTTkSignBoolLt(TTkSignBoolLt node);
    void caseTTkBlank(TTkBlank node);
    void caseTTkId(TTkId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
