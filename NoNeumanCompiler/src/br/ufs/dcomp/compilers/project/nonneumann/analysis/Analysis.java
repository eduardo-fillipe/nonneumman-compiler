/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.analysis;

import br.ufs.dcomp.compilers.project.nonneumann.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseATkReservedEntryFunctionDec(ATkReservedEntryFunctionDec node);

    void caseTTkCommentLine(TTkCommentLine node);
    void caseTTkCommentMultiLine(TTkCommentMultiLine node);
    void caseTTkReservedEntry(TTkReservedEntry node);
    void caseTTkReservedFunction(TTkReservedFunction node);
    void caseTTkReservedConst(TTkReservedConst node);
    void caseTTkReservedTypeInt(TTkReservedTypeInt node);
    void caseTTkReservedTypeBool(TTkReservedTypeBool node);
    void caseTTkReservedTypeReal(TTkReservedTypeReal node);
    void caseTTkReservedBoolTrue(TTkReservedBoolTrue node);
    void caseTTkReservedBoolFalse(TTkReservedBoolFalse node);
    void caseTTkReservedBoolAnd(TTkReservedBoolAnd node);
    void caseTTkReservedBoolOr(TTkReservedBoolOr node);
    void caseTTkReservedIf(TTkReservedIf node);
    void caseTTkReservedThen(TTkReservedThen node);
    void caseTTkReservedElse(TTkReservedElse node);
    void caseTTkReservedLambda(TTkReservedLambda node);
    void caseTTkNumberIntegerDec(TTkNumberIntegerDec node);
    void caseTTkNumberIntegerHex(TTkNumberIntegerHex node);
    void caseTTkNumberFloat(TTkNumberFloat node);
    void caseTTkNumberFloatCientificNotation(TTkNumberFloatCientificNotation node);
    void caseTTkSignPlus(TTkSignPlus node);
    void caseTTkSignMinus(TTkSignMinus node);
    void caseTTkSignMult(TTkSignMult node);
    void caseTTkSignDiv(TTkSignDiv node);
    void caseTTkSignMod(TTkSignMod node);
    void caseTTkSignColon(TTkSignColon node);
    void caseTTkSignComma(TTkSignComma node);
    void caseTTkSignExclamation(TTkSignExclamation node);
    void caseTTkSignParOpen(TTkSignParOpen node);
    void caseTTkSignParClose(TTkSignParClose node);
    void caseTTkSignBoolEqual(TTkSignBoolEqual node);
    void caseTTkSignBoolGt(TTkSignBoolGt node);
    void caseTTkSignBoolLt(TTkSignBoolLt node);
    void caseTTkBlank(TTkBlank node);
    void caseTTkId(TTkId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
