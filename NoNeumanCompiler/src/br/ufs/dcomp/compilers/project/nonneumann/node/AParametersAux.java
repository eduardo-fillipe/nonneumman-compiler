/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.node;

import br.ufs.dcomp.compilers.project.nonneumann.analysis.*;

@SuppressWarnings("nls")
public final class AParametersAux extends PParametersAux
{
    private TTkSignComma _tkSignComma_;
    private PParameter _parameter_;

    public AParametersAux()
    {
        // Constructor
    }

    public AParametersAux(
        @SuppressWarnings("hiding") TTkSignComma _tkSignComma_,
        @SuppressWarnings("hiding") PParameter _parameter_)
    {
        // Constructor
        setTkSignComma(_tkSignComma_);

        setParameter(_parameter_);

    }

    @Override
    public Object clone()
    {
        return new AParametersAux(
            cloneNode(this._tkSignComma_),
            cloneNode(this._parameter_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParametersAux(this);
    }

    public TTkSignComma getTkSignComma()
    {
        return this._tkSignComma_;
    }

    public void setTkSignComma(TTkSignComma node)
    {
        if(this._tkSignComma_ != null)
        {
            this._tkSignComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkSignComma_ = node;
    }

    public PParameter getParameter()
    {
        return this._parameter_;
    }

    public void setParameter(PParameter node)
    {
        if(this._parameter_ != null)
        {
            this._parameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parameter_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tkSignComma_)
            + toString(this._parameter_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tkSignComma_ == child)
        {
            this._tkSignComma_ = null;
            return;
        }

        if(this._parameter_ == child)
        {
            this._parameter_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tkSignComma_ == oldChild)
        {
            setTkSignComma((TTkSignComma) newChild);
            return;
        }

        if(this._parameter_ == oldChild)
        {
            setParameter((PParameter) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
