/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.analysis;

import java.util.*;
import br.ufs.dcomp.compilers.project.nonneumann.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAProgram().apply(this);
        outStart(node);
    }

    public void inAAProgram(AAProgram node)
    {
        defaultIn(node);
    }

    public void outAAProgram(AAProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProgram(AAProgram node)
    {
        inAAProgram(node);
        {
            List<PAFunctionDec> copy = new ArrayList<PAFunctionDec>(node.getAFunctionDec());
            Collections.reverse(copy);
            for(PAFunctionDec e : copy)
            {
                e.apply(this);
            }
        }
        outAAProgram(node);
    }

    public void inAAFunctionDec(AAFunctionDec node)
    {
        defaultIn(node);
    }

    public void outAAFunctionDec(AAFunctionDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFunctionDec(AAFunctionDec node)
    {
        inAAFunctionDec(node);
        if(node.getAExpFunctionAux() != null)
        {
            node.getAExpFunctionAux().apply(this);
        }
        if(node.getAParametersFunctionAux() != null)
        {
            node.getAParametersFunctionAux().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAAFunctionDec(node);
    }

    public void inATkReservedTypeIntAType(ATkReservedTypeIntAType node)
    {
        defaultIn(node);
    }

    public void outATkReservedTypeIntAType(ATkReservedTypeIntAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkReservedTypeIntAType(ATkReservedTypeIntAType node)
    {
        inATkReservedTypeIntAType(node);
        if(node.getTkReservedTypeInt() != null)
        {
            node.getTkReservedTypeInt().apply(this);
        }
        outATkReservedTypeIntAType(node);
    }

    public void inATkReservedTypeBoolAType(ATkReservedTypeBoolAType node)
    {
        defaultIn(node);
    }

    public void outATkReservedTypeBoolAType(ATkReservedTypeBoolAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkReservedTypeBoolAType(ATkReservedTypeBoolAType node)
    {
        inATkReservedTypeBoolAType(node);
        if(node.getTkReservedTypeBool() != null)
        {
            node.getTkReservedTypeBool().apply(this);
        }
        outATkReservedTypeBoolAType(node);
    }

    public void inATkReservedTypeRealAType(ATkReservedTypeRealAType node)
    {
        defaultIn(node);
    }

    public void outATkReservedTypeRealAType(ATkReservedTypeRealAType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkReservedTypeRealAType(ATkReservedTypeRealAType node)
    {
        inATkReservedTypeRealAType(node);
        if(node.getTkReservedTypeReal() != null)
        {
            node.getTkReservedTypeReal().apply(this);
        }
        outATkReservedTypeRealAType(node);
    }

    public void inAAFunctionCall(AAFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAAFunctionCall(AAFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFunctionCall(AAFunctionCall node)
    {
        inAAFunctionCall(node);
        {
            List<PAExpList> copy = new ArrayList<PAExpList>(node.getAExpList());
            Collections.reverse(copy);
            for(PAExpList e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        outAAFunctionCall(node);
    }

    public void inADecAParameter(ADecAParameter node)
    {
        defaultIn(node);
    }

    public void outADecAParameter(ADecAParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecAParameter(ADecAParameter node)
    {
        inADecAParameter(node);
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outADecAParameter(node);
    }

    public void inASignatureAParameter(ASignatureAParameter node)
    {
        defaultIn(node);
    }

    public void outASignatureAParameter(ASignatureAParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureAParameter(ASignatureAParameter node)
    {
        inASignatureAParameter(node);
        if(node.getASignature() != null)
        {
            node.getASignature().apply(this);
        }
        outASignatureAParameter(node);
    }

    public void inATypeAParameterSignature(ATypeAParameterSignature node)
    {
        defaultIn(node);
    }

    public void outATypeAParameterSignature(ATypeAParameterSignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAParameterSignature(ATypeAParameterSignature node)
    {
        inATypeAParameterSignature(node);
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outATypeAParameterSignature(node);
    }

    public void inASignatureAParameterSignature(ASignatureAParameterSignature node)
    {
        defaultIn(node);
    }

    public void outASignatureAParameterSignature(ASignatureAParameterSignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignatureAParameterSignature(ASignatureAParameterSignature node)
    {
        inASignatureAParameterSignature(node);
        if(node.getASignature() != null)
        {
            node.getASignature().apply(this);
        }
        outASignatureAParameterSignature(node);
    }

    public void inAAParameters(AAParameters node)
    {
        defaultIn(node);
    }

    public void outAAParameters(AAParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParameters(AAParameters node)
    {
        inAAParameters(node);
        {
            List<PAParametersAux> copy = new ArrayList<PAParametersAux>(node.getAParametersAux());
            Collections.reverse(copy);
            for(PAParametersAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAParameter() != null)
        {
            node.getAParameter().apply(this);
        }
        outAAParameters(node);
    }

    public void inAASignature(AASignature node)
    {
        defaultIn(node);
    }

    public void outAASignature(AASignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASignature(AASignature node)
    {
        inAASignature(node);
        if(node.getAParametersSignature() != null)
        {
            node.getAParametersSignature().apply(this);
        }
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAASignature(node);
    }

    public void inAADecCons(AADecCons node)
    {
        defaultIn(node);
    }

    public void outAADecCons(AADecCons node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecCons(AADecCons node)
    {
        inAADecCons(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAADecCons(node);
    }

    public void inATkReservedBoolTrueABooleanValue(ATkReservedBoolTrueABooleanValue node)
    {
        defaultIn(node);
    }

    public void outATkReservedBoolTrueABooleanValue(ATkReservedBoolTrueABooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkReservedBoolTrueABooleanValue(ATkReservedBoolTrueABooleanValue node)
    {
        inATkReservedBoolTrueABooleanValue(node);
        if(node.getTkReservedBoolTrue() != null)
        {
            node.getTkReservedBoolTrue().apply(this);
        }
        outATkReservedBoolTrueABooleanValue(node);
    }

    public void inATkReservedBoolFalseABooleanValue(ATkReservedBoolFalseABooleanValue node)
    {
        defaultIn(node);
    }

    public void outATkReservedBoolFalseABooleanValue(ATkReservedBoolFalseABooleanValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkReservedBoolFalseABooleanValue(ATkReservedBoolFalseABooleanValue node)
    {
        inATkReservedBoolFalseABooleanValue(node);
        if(node.getTkReservedBoolFalse() != null)
        {
            node.getTkReservedBoolFalse().apply(this);
        }
        outATkReservedBoolFalseABooleanValue(node);
    }

    public void inATkNumberFloatANumeralFloat(ATkNumberFloatANumeralFloat node)
    {
        defaultIn(node);
    }

    public void outATkNumberFloatANumeralFloat(ATkNumberFloatANumeralFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkNumberFloatANumeralFloat(ATkNumberFloatANumeralFloat node)
    {
        inATkNumberFloatANumeralFloat(node);
        if(node.getTkNumberFloat() != null)
        {
            node.getTkNumberFloat().apply(this);
        }
        outATkNumberFloatANumeralFloat(node);
    }

    public void inATkNumberFloatCientificNotationANumeralFloat(ATkNumberFloatCientificNotationANumeralFloat node)
    {
        defaultIn(node);
    }

    public void outATkNumberFloatCientificNotationANumeralFloat(ATkNumberFloatCientificNotationANumeralFloat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkNumberFloatCientificNotationANumeralFloat(ATkNumberFloatCientificNotationANumeralFloat node)
    {
        inATkNumberFloatCientificNotationANumeralFloat(node);
        if(node.getTkNumberFloatCientificNotation() != null)
        {
            node.getTkNumberFloatCientificNotation().apply(this);
        }
        outATkNumberFloatCientificNotationANumeralFloat(node);
    }

    public void inAABooleanValueALiteral(AABooleanValueALiteral node)
    {
        defaultIn(node);
    }

    public void outAABooleanValueALiteral(AABooleanValueALiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABooleanValueALiteral(AABooleanValueALiteral node)
    {
        inAABooleanValueALiteral(node);
        if(node.getABooleanValue() != null)
        {
            node.getABooleanValue().apply(this);
        }
        outAABooleanValueALiteral(node);
    }

    public void inAANumeralFloatALiteral(AANumeralFloatALiteral node)
    {
        defaultIn(node);
    }

    public void outAANumeralFloatALiteral(AANumeralFloatALiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumeralFloatALiteral(AANumeralFloatALiteral node)
    {
        inAANumeralFloatALiteral(node);
        if(node.getANumeralFloat() != null)
        {
            node.getANumeralFloat().apply(this);
        }
        outAANumeralFloatALiteral(node);
    }

    public void inAANumeralIntALiteral(AANumeralIntALiteral node)
    {
        defaultIn(node);
    }

    public void outAANumeralIntALiteral(AANumeralIntALiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumeralIntALiteral(AANumeralIntALiteral node)
    {
        inAANumeralIntALiteral(node);
        if(node.getANumeralInt() != null)
        {
            node.getANumeralInt().apply(this);
        }
        outAANumeralIntALiteral(node);
    }

    public void inATkNumberIntegerDecANumeralInt(ATkNumberIntegerDecANumeralInt node)
    {
        defaultIn(node);
    }

    public void outATkNumberIntegerDecANumeralInt(ATkNumberIntegerDecANumeralInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkNumberIntegerDecANumeralInt(ATkNumberIntegerDecANumeralInt node)
    {
        inATkNumberIntegerDecANumeralInt(node);
        if(node.getTkNumberIntegerDec() != null)
        {
            node.getTkNumberIntegerDec().apply(this);
        }
        outATkNumberIntegerDecANumeralInt(node);
    }

    public void inATkNumberIntegerHexANumeralInt(ATkNumberIntegerHexANumeralInt node)
    {
        defaultIn(node);
    }

    public void outATkNumberIntegerHexANumeralInt(ATkNumberIntegerHexANumeralInt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATkNumberIntegerHexANumeralInt(ATkNumberIntegerHexANumeralInt node)
    {
        inATkNumberIntegerHexANumeralInt(node);
        if(node.getTkNumberIntegerHex() != null)
        {
            node.getTkNumberIntegerHex().apply(this);
        }
        outATkNumberIntegerHexANumeralInt(node);
    }

    public void inAAIfStmtAExp(AAIfStmtAExp node)
    {
        defaultIn(node);
    }

    public void outAAIfStmtAExp(AAIfStmtAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIfStmtAExp(AAIfStmtAExp node)
    {
        inAAIfStmtAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMiddle() != null)
        {
            node.getMiddle().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAIfStmtAExp(node);
    }

    public void inAAOrAExp(AAOrAExp node)
    {
        defaultIn(node);
    }

    public void outAAOrAExp(AAOrAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAOrAExp(AAOrAExp node)
    {
        inAAOrAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAOrAExp(node);
    }

    public void inAAAndAExp(AAAndAExp node)
    {
        defaultIn(node);
    }

    public void outAAAndAExp(AAAndAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAndAExp(AAAndAExp node)
    {
        inAAAndAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAAndAExp(node);
    }

    public void inAAEqualAExp(AAEqualAExp node)
    {
        defaultIn(node);
    }

    public void outAAEqualAExp(AAEqualAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEqualAExp(AAEqualAExp node)
    {
        inAAEqualAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAEqualAExp(node);
    }

    public void inAALtAExp(AALtAExp node)
    {
        defaultIn(node);
    }

    public void outAALtAExp(AALtAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALtAExp(AALtAExp node)
    {
        inAALtAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAALtAExp(node);
    }

    public void inAAGtAExp(AAGtAExp node)
    {
        defaultIn(node);
    }

    public void outAAGtAExp(AAGtAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAGtAExp(AAGtAExp node)
    {
        inAAGtAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAGtAExp(node);
    }

    public void inAANegationAExp(AANegationAExp node)
    {
        defaultIn(node);
    }

    public void outAANegationAExp(AANegationAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANegationAExp(AANegationAExp node)
    {
        inAANegationAExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAANegationAExp(node);
    }

    public void inAAParenthesisAExp(AAParenthesisAExp node)
    {
        defaultIn(node);
    }

    public void outAAParenthesisAExp(AAParenthesisAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParenthesisAExp(AAParenthesisAExp node)
    {
        inAAParenthesisAExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAParenthesisAExp(node);
    }

    public void inAAModAExp(AAModAExp node)
    {
        defaultIn(node);
    }

    public void outAAModAExp(AAModAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAModAExp(AAModAExp node)
    {
        inAAModAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAModAExp(node);
    }

    public void inAAMultAExp(AAMultAExp node)
    {
        defaultIn(node);
    }

    public void outAAMultAExp(AAMultAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMultAExp(AAMultAExp node)
    {
        inAAMultAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAMultAExp(node);
    }

    public void inAADivAExp(AADivAExp node)
    {
        defaultIn(node);
    }

    public void outAADivAExp(AADivAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADivAExp(AADivAExp node)
    {
        inAADivAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAADivAExp(node);
    }

    public void inAATypeAExp(AATypeAExp node)
    {
        defaultIn(node);
    }

    public void outAATypeAExp(AATypeAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATypeAExp(AATypeAExp node)
    {
        inAATypeAExp(node);
        if(node.getAType() != null)
        {
            node.getAType().apply(this);
        }
        outAATypeAExp(node);
    }

    public void inAALiteralAExp(AALiteralAExp node)
    {
        defaultIn(node);
    }

    public void outAALiteralAExp(AALiteralAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALiteralAExp(AALiteralAExp node)
    {
        inAALiteralAExp(node);
        if(node.getALiteral() != null)
        {
            node.getALiteral().apply(this);
        }
        outAALiteralAExp(node);
    }

    public void inAAFunctionCallAExp(AAFunctionCallAExp node)
    {
        defaultIn(node);
    }

    public void outAAFunctionCallAExp(AAFunctionCallAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFunctionCallAExp(AAFunctionCallAExp node)
    {
        inAAFunctionCallAExp(node);
        if(node.getAFunctionCall() != null)
        {
            node.getAFunctionCall().apply(this);
        }
        outAAFunctionCallAExp(node);
    }

    public void inABooleanValueAExp(ABooleanValueAExp node)
    {
        defaultIn(node);
    }

    public void outABooleanValueAExp(ABooleanValueAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanValueAExp(ABooleanValueAExp node)
    {
        inABooleanValueAExp(node);
        if(node.getABooleanValue() != null)
        {
            node.getABooleanValue().apply(this);
        }
        outABooleanValueAExp(node);
    }

    public void inANumeralFloatAExp(ANumeralFloatAExp node)
    {
        defaultIn(node);
    }

    public void outANumeralFloatAExp(ANumeralFloatAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeralFloatAExp(ANumeralFloatAExp node)
    {
        inANumeralFloatAExp(node);
        if(node.getANumeralFloat() != null)
        {
            node.getANumeralFloat().apply(this);
        }
        outANumeralFloatAExp(node);
    }

    public void inANumeralIntAExp(ANumeralIntAExp node)
    {
        defaultIn(node);
    }

    public void outANumeralIntAExp(ANumeralIntAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeralIntAExp(ANumeralIntAExp node)
    {
        inANumeralIntAExp(node);
        if(node.getANumeralInt() != null)
        {
            node.getANumeralInt().apply(this);
        }
        outANumeralIntAExp(node);
    }

    public void inAAExpBlocAExp(AAExpBlocAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpBlocAExp(AAExpBlocAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpBlocAExp(AAExpBlocAExp node)
    {
        inAAExpBlocAExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        {
            List<PADecCons> copy = new ArrayList<PADecCons>(node.getADecCons());
            Collections.reverse(copy);
            for(PADecCons e : copy)
            {
                e.apply(this);
            }
        }
        outAAExpBlocAExp(node);
    }

    public void inAAPlusAExp(AAPlusAExp node)
    {
        defaultIn(node);
    }

    public void outAAPlusAExp(AAPlusAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPlusAExp(AAPlusAExp node)
    {
        inAAPlusAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAPlusAExp(node);
    }

    public void inAAMinusAExp(AAMinusAExp node)
    {
        defaultIn(node);
    }

    public void outAAMinusAExp(AAMinusAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMinusAExp(AAMinusAExp node)
    {
        inAAMinusAExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAMinusAExp(node);
    }

    public void inAALambdaAExp(AALambdaAExp node)
    {
        defaultIn(node);
    }

    public void outAALambdaAExp(AALambdaAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALambdaAExp(AALambdaAExp node)
    {
        inAALambdaAExp(node);
        if(node.getALambda() != null)
        {
            node.getALambda().apply(this);
        }
        outAALambdaAExp(node);
    }

    public void inAAIdList(AAIdList node)
    {
        defaultIn(node);
    }

    public void outAAIdList(AAIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdList(AAIdList node)
    {
        inAAIdList(node);
        {
            List<PAIdListAux> copy = new ArrayList<PAIdListAux>(node.getAIdListAux());
            Collections.reverse(copy);
            for(PAIdListAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        outAAIdList(node);
    }

    public void inAAIdListAux(AAIdListAux node)
    {
        defaultIn(node);
    }

    public void outAAIdListAux(AAIdListAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdListAux(AAIdListAux node)
    {
        inAAIdListAux(node);
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        outAAIdListAux(node);
    }

    public void inAAId(AAId node)
    {
        defaultIn(node);
    }

    public void outAAId(AAId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAId(AAId node)
    {
        inAAId(node);
        if(node.getTkId() != null)
        {
            node.getTkId().apply(this);
        }
        outAAId(node);
    }

    public void inAAListExp(AAListExp node)
    {
        defaultIn(node);
    }

    public void outAAListExp(AAListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAListExp(AAListExp node)
    {
        inAAListExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAListExp(node);
    }

    public void inAABlocExp(AABlocExp node)
    {
        defaultIn(node);
    }

    public void outAABlocExp(AABlocExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocExp(AABlocExp node)
    {
        inAABlocExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        {
            List<PADecCons> copy = new ArrayList<PADecCons>(node.getADecCons());
            Collections.reverse(copy);
            for(PADecCons e : copy)
            {
                e.apply(this);
            }
        }
        outAABlocExp(node);
    }

    public void inAALambda(AALambda node)
    {
        defaultIn(node);
    }

    public void outAALambda(AALambda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALambda(AALambda node)
    {
        inAALambda(node);
        if(node.getALambdaExpList() != null)
        {
            node.getALambdaExpList().apply(this);
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        if(node.getAIdList() != null)
        {
            node.getAIdList().apply(this);
        }
        outAALambda(node);
    }

    public void inAALambdaExpList(AALambdaExpList node)
    {
        defaultIn(node);
    }

    public void outAALambdaExpList(AALambdaExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALambdaExpList(AALambdaExpList node)
    {
        inAALambdaExpList(node);
        {
            List<PALambdaExpListAux> copy = new ArrayList<PALambdaExpListAux>(node.getALambdaExpListAux());
            Collections.reverse(copy);
            for(PALambdaExpListAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAALambdaExpList(node);
    }

    public void inAALambdaExpListAux(AALambdaExpListAux node)
    {
        defaultIn(node);
    }

    public void outAALambdaExpListAux(AALambdaExpListAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALambdaExpListAux(AALambdaExpListAux node)
    {
        inAALambdaExpListAux(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAALambdaExpListAux(node);
    }

    public void inAAExpList(AAExpList node)
    {
        defaultIn(node);
    }

    public void outAAExpList(AAExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpList(AAExpList node)
    {
        inAAExpList(node);
        {
            List<PAExpListAux> copy = new ArrayList<PAExpListAux>(node.getAExpListAux());
            Collections.reverse(copy);
            for(PAExpListAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAExpList(node);
    }

    public void inAAExpListAux(AAExpListAux node)
    {
        defaultIn(node);
    }

    public void outAAExpListAux(AAExpListAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpListAux(AAExpListAux node)
    {
        inAAExpListAux(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAExpListAux(node);
    }

    public void inAAParametersSignatureAux(AAParametersSignatureAux node)
    {
        defaultIn(node);
    }

    public void outAAParametersSignatureAux(AAParametersSignatureAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParametersSignatureAux(AAParametersSignatureAux node)
    {
        inAAParametersSignatureAux(node);
        if(node.getAParameterSignature() != null)
        {
            node.getAParameterSignature().apply(this);
        }
        outAAParametersSignatureAux(node);
    }

    public void inAAParametersSignature(AAParametersSignature node)
    {
        defaultIn(node);
    }

    public void outAAParametersSignature(AAParametersSignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParametersSignature(AAParametersSignature node)
    {
        inAAParametersSignature(node);
        {
            List<PAParametersSignatureAux> copy = new ArrayList<PAParametersSignatureAux>(node.getAParametersSignatureAux());
            Collections.reverse(copy);
            for(PAParametersSignatureAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAParameterSignature() != null)
        {
            node.getAParameterSignature().apply(this);
        }
        outAAParametersSignature(node);
    }

    public void inAAParametersFunctionAux(AAParametersFunctionAux node)
    {
        defaultIn(node);
    }

    public void outAAParametersFunctionAux(AAParametersFunctionAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParametersFunctionAux(AAParametersFunctionAux node)
    {
        inAAParametersFunctionAux(node);
        {
            List<PAParameters> copy = new ArrayList<PAParameters>(node.getAParameters());
            Collections.reverse(copy);
            for(PAParameters e : copy)
            {
                e.apply(this);
            }
        }
        outAAParametersFunctionAux(node);
    }

    public void inAAExpFunctionAux(AAExpFunctionAux node)
    {
        defaultIn(node);
    }

    public void outAAExpFunctionAux(AAExpFunctionAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpFunctionAux(AAExpFunctionAux node)
    {
        inAAExpFunctionAux(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAExpFunctionAux(node);
    }

    public void inAAParametersAux(AAParametersAux node)
    {
        defaultIn(node);
    }

    public void outAAParametersAux(AAParametersAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParametersAux(AAParametersAux node)
    {
        inAAParametersAux(node);
        if(node.getAParameter() != null)
        {
            node.getAParameter().apply(this);
        }
        outAAParametersAux(node);
    }
}
