/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.analysis;

import java.util.*;
import br.ufs.dcomp.compilers.project.nonneumann.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAProgram(AAProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFunctionDec(AAFunctionDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedTypeIntAType(ATkReservedTypeIntAType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedTypeBoolAType(ATkReservedTypeBoolAType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedTypeRealAType(ATkReservedTypeRealAType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFunctionCall(AAFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecAParameter(ADecAParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureAParameter(ASignatureAParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeAParameterSignature(ATypeAParameterSignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureAParameterSignature(ASignatureAParameterSignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParameters(AAParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAASignature(AASignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADecCons(AADecCons node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedBoolTrueABooleanValue(ATkReservedBoolTrueABooleanValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedBoolFalseABooleanValue(ATkReservedBoolFalseABooleanValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberFloatANumeralFloat(ATkNumberFloatANumeralFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberFloatCientificNotationANumeralFloat(ATkNumberFloatCientificNotationANumeralFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABooleanValueALiteral(AABooleanValueALiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANumeralFloatALiteral(AANumeralFloatALiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANumeralIntALiteral(AANumeralIntALiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberIntegerDecANumeralInt(ATkNumberIntegerDecANumeralInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberIntegerHexANumeralInt(ATkNumberIntegerHexANumeralInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIfStmtAExp(AAIfStmtAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAOrAExp(AAOrAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAndAExp(AAAndAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAEqualAExp(AAEqualAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALtAExp(AALtAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAGtAExp(AAGtAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANegationAExp(AANegationAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParenthesisAExp(AAParenthesisAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAModAExp(AAModAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMultAExp(AAMultAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADivAExp(AADivAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAATypeAExp(AATypeAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALiteralAExp(AALiteralAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFunctionCallAExp(AAFunctionCallAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanValueAExp(ABooleanValueAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeralFloatAExp(ANumeralFloatAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeralIntAExp(ANumeralIntAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpBlocAExp(AAExpBlocAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAPlusAExp(AAPlusAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMinusAExp(AAMinusAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALambdaAExp(AALambdaAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdList(AAIdList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdListAux(AAIdListAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAId(AAId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAListExp(AAListExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABlocExp(AABlocExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALambda(AALambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALambdaExpList(AALambdaExpList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALambdaExpListAux(AALambdaExpListAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpList(AAExpList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpListAux(AAExpListAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersSignatureAux(AAParametersSignatureAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersSignature(AAParametersSignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersFunctionAux(AAParametersFunctionAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpFunctionAux(AAExpFunctionAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersAux(AAParametersAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkCommentLine(TTkCommentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkCommentMultiLine(TTkCommentMultiLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedEntry(TTkReservedEntry node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedFunction(TTkReservedFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedConst(TTkReservedConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedTypeInt(TTkReservedTypeInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedTypeBool(TTkReservedTypeBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedTypeReal(TTkReservedTypeReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolTrue(TTkReservedBoolTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolFalse(TTkReservedBoolFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolAnd(TTkReservedBoolAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolOr(TTkReservedBoolOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedIf(TTkReservedIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedThen(TTkReservedThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedElse(TTkReservedElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedLambda(TTkReservedLambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberIntegerDec(TTkNumberIntegerDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberIntegerHex(TTkNumberIntegerHex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberFloat(TTkNumberFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberFloatCientificNotation(TTkNumberFloatCientificNotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignPlus(TTkSignPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignMinus(TTkSignMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignMult(TTkSignMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignDiv(TTkSignDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignMod(TTkSignMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignColon(TTkSignColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignComma(TTkSignComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignExclamation(TTkSignExclamation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignParOpen(TTkSignParOpen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignParClose(TTkSignParClose node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBraceOpen(TTkSignBraceOpen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBraceClose(TTkSignBraceClose node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBoolEqual(TTkSignBoolEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBoolGt(TTkSignBoolGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBoolLt(TTkSignBoolLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkBlank(TTkBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkId(TTkId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
