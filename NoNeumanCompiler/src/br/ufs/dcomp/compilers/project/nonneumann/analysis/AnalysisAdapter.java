/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.analysis;

import java.util.*;
import br.ufs.dcomp.compilers.project.nonneumann.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDec(AFunctionDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersFunctionAux(AParametersFunctionAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpFunctionAux(AExpFunctionAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedTypeIntType(ATkReservedTypeIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedTypeRealType(ATkReservedTypeRealType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedTypeBoolType(ATkReservedTypeBoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameters(AParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersAux(AParametersAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecParameter(ADecParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureParameter(ASignatureParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignature(ASignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersSignature(AParametersSignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametersSignatureAux(AParametersSignatureAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeParameterSignature(ATypeParameterSignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASignatureParameterSignature(ASignatureParameterSignature node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegBoolExp(ANegBoolExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmtExp(AIfStmtExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALambdaExp(ALambdaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpExp(AOpExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorOp(AFactorOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegFactor(ANegFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralTerm(ALiteralTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallTerm(AFunctionCallTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpTerm(AExpTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegation(ANegation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanValueLiteral(ABooleanValueLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeralFloatLiteral(ANumeralFloatLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumeralIntLiteral(ANumeralIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedBoolTrueBooleanValue(ATkReservedBoolTrueBooleanValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkReservedBoolFalseBooleanValue(ATkReservedBoolFalseBooleanValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberFloatNumeralFloat(ATkNumberFloatNumeralFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberFloatCientificNotationNumeralFloat(ATkNumberFloatCientificNotationNumeralFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberIntegerDecNumeralInt(ATkNumberIntegerDecNumeralInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATkNumberIntegerHexNumeralInt(ATkNumberIntegerHexNumeralInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdFunctionCall(AIdFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpListExpList(AExpListExpList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpListAuxExpListAux(AExpListAuxExpListAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecConsDecCons(ADecConsDecCons node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALambda(ALambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALambdaExpList(ALambdaExpList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALambdaExpListAux(ALambdaExpListAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdList(AIdList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdListAux(AIdListAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmtExpAux(AIfStmtExpAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmtElseAux(AIfStmtElseAux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkCommentLine(TTkCommentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkCommentMultiLine(TTkCommentMultiLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedEntry(TTkReservedEntry node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedFunction(TTkReservedFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedConst(TTkReservedConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedTypeInt(TTkReservedTypeInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedTypeBool(TTkReservedTypeBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedTypeReal(TTkReservedTypeReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolTrue(TTkReservedBoolTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolFalse(TTkReservedBoolFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolAnd(TTkReservedBoolAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedBoolOr(TTkReservedBoolOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedIf(TTkReservedIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedThen(TTkReservedThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedElse(TTkReservedElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkReservedLambda(TTkReservedLambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberIntegerDec(TTkNumberIntegerDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberIntegerHex(TTkNumberIntegerHex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberFloat(TTkNumberFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkNumberFloatCientificNotation(TTkNumberFloatCientificNotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignPlus(TTkSignPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignMinus(TTkSignMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignMult(TTkSignMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignDiv(TTkSignDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignMod(TTkSignMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignColon(TTkSignColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignComma(TTkSignComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignExclamation(TTkSignExclamation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignParOpen(TTkSignParOpen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignParClose(TTkSignParClose node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBraceOpen(TTkSignBraceOpen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBraceClose(TTkSignBraceClose node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBoolEqual(TTkSignBoolEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBoolGt(TTkSignBoolGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkSignBoolLt(TTkSignBoolLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkBlank(TTkBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkId(TTkId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
