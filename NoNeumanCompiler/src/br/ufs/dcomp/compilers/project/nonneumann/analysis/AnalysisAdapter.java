/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.analysis;

import java.util.*;
import br.ufs.dcomp.compilers.project.nonneumann.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseTCommentLine(TCommentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentMultiLine(TCommentMultiLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedEntry(TReservedEntry node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedFunction(TReservedFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedConst(TReservedConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedTypeInt(TReservedTypeInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedTypeBool(TReservedTypeBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedTypeReal(TReservedTypeReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedBoolTrue(TReservedBoolTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedBoolFalse(TReservedBoolFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedBoolAnd(TReservedBoolAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedBoolOr(TReservedBoolOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedIf(TReservedIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedThen(TReservedThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedElse(TReservedElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReservedLambda(TReservedLambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberIntegerDec(TNumberIntegerDec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberIntegerHex(TNumberIntegerHex node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberFloat(TNumberFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberFloatCientificNotation(TNumberFloatCientificNotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignPlus(TSignPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignMinus(TSignMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignMult(TSignMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignDiv(TSignDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignMod(TSignMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignColon(TSignColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignComma(TSignComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignExclamation(TSignExclamation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignParOpen(TSignParOpen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignParClose(TSignParClose node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignBoolEqual(TSignBoolEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignBoolGt(TSignBoolGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSignBoolLt(TSignBoolLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
