/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.ufs.dcomp.compilers.project.nonneumann.node;

import java.util.*;
import br.ufs.dcomp.compilers.project.nonneumann.analysis.*;

@SuppressWarnings("nls")
public final class AParametersFunctionAux extends PParametersFunctionAux
{
    private TTkSignParOpen _tkSignParOpen_;
    private final LinkedList<PParameters> _parameters_ = new LinkedList<PParameters>();
    private TTkSignParClose _tkSignParClose_;

    public AParametersFunctionAux()
    {
        // Constructor
    }

    public AParametersFunctionAux(
        @SuppressWarnings("hiding") TTkSignParOpen _tkSignParOpen_,
        @SuppressWarnings("hiding") List<?> _parameters_,
        @SuppressWarnings("hiding") TTkSignParClose _tkSignParClose_)
    {
        // Constructor
        setTkSignParOpen(_tkSignParOpen_);

        setParameters(_parameters_);

        setTkSignParClose(_tkSignParClose_);

    }

    @Override
    public Object clone()
    {
        return new AParametersFunctionAux(
            cloneNode(this._tkSignParOpen_),
            cloneList(this._parameters_),
            cloneNode(this._tkSignParClose_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParametersFunctionAux(this);
    }

    public TTkSignParOpen getTkSignParOpen()
    {
        return this._tkSignParOpen_;
    }

    public void setTkSignParOpen(TTkSignParOpen node)
    {
        if(this._tkSignParOpen_ != null)
        {
            this._tkSignParOpen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkSignParOpen_ = node;
    }

    public LinkedList<PParameters> getParameters()
    {
        return this._parameters_;
    }

    public void setParameters(List<?> list)
    {
        for(PParameters e : this._parameters_)
        {
            e.parent(null);
        }
        this._parameters_.clear();

        for(Object obj_e : list)
        {
            PParameters e = (PParameters) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._parameters_.add(e);
        }
    }

    public TTkSignParClose getTkSignParClose()
    {
        return this._tkSignParClose_;
    }

    public void setTkSignParClose(TTkSignParClose node)
    {
        if(this._tkSignParClose_ != null)
        {
            this._tkSignParClose_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tkSignParClose_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tkSignParOpen_)
            + toString(this._parameters_)
            + toString(this._tkSignParClose_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tkSignParOpen_ == child)
        {
            this._tkSignParOpen_ = null;
            return;
        }

        if(this._parameters_.remove(child))
        {
            return;
        }

        if(this._tkSignParClose_ == child)
        {
            this._tkSignParClose_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tkSignParOpen_ == oldChild)
        {
            setTkSignParOpen((TTkSignParOpen) newChild);
            return;
        }

        for(ListIterator<PParameters> i = this._parameters_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParameters) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._tkSignParClose_ == oldChild)
        {
            setTkSignParClose((TTkSignParClose) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
