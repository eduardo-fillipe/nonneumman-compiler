/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAProgram(AAProgram node);
    void caseAAFunctionDescription(AAFunctionDescription node);
    void caseAAFunctionParameters(AAFunctionParameters node);
    void caseAAFunctionExpression(AAFunctionExpression node);
    void caseAAIntAType(AAIntAType node);
    void caseAARealAType(AARealAType node);
    void caseAABoolAType(AABoolAType node);
    void caseAAParameters(AAParameters node);
    void caseAAParametersSequence(AAParametersSequence node);
    void caseAAParameterAParameter(AAParameterAParameter node);
    void caseAAAssignFunctionAParameter(AAAssignFunctionAParameter node);
    void caseAAAssignFunction(AAAssignFunction node);
    void caseAAParametersAssign(AAParametersAssign node);
    void caseAAParametersAssignSequence(AAParametersAssignSequence node);
    void caseAAParameterAssignAParameterAssign(AAParameterAssignAParameterAssign node);
    void caseAAAssignFunctionAParameterAssign(AAAssignFunctionAParameterAssign node);
    void caseAAIfThenElseStatementAExpression(AAIfThenElseStatementAExpression node);
    void caseAACallFunctionAExpression(AACallFunctionAExpression node);
    void caseAABlockExpressionAExpression(AABlockExpressionAExpression node);
    void caseAALambdaAExpression(AALambdaAExpression node);
    void caseAABiggerAExpression(AABiggerAExpression node);
    void caseAAMinorAExpression(AAMinorAExpression node);
    void caseAAEqualAExpression(AAEqualAExpression node);
    void caseAANegationAExpression(AANegationAExpression node);
    void caseAAOrAExpression(AAOrAExpression node);
    void caseAAAndAExpression(AAAndAExpression node);
    void caseAAPlusAExpression(AAPlusAExpression node);
    void caseAAMinusAExpression(AAMinusAExpression node);
    void caseAAMultAExpression(AAMultAExpression node);
    void caseAADivAExpression(AADivAExpression node);
    void caseAAModAExpression(AAModAExpression node);
    void caseAANegativeNumberAExpression(AANegativeNumberAExpression node);
    void caseAATrueAExpression(AATrueAExpression node);
    void caseAAFalseAExpression(AAFalseAExpression node);
    void caseAAIntDecimalAExpression(AAIntDecimalAExpression node);
    void caseAAIntHexadecimalAExpression(AAIntHexadecimalAExpression node);
    void caseAAFloatAExpression(AAFloatAExpression node);
    void caseAACientificNotationAExpression(AACientificNotationAExpression node);
    void caseAAIdentifierAExpression(AAIdentifierAExpression node);
    void caseAABlockExpression(AABlockExpression node);
    void caseAADeclarationConstant(AADeclarationConstant node);
    void caseAACallFunction(AACallFunction node);
    void caseAALambda(AALambda node);
    void caseAAListIdentifiers(AAListIdentifiers node);
    void caseAAIdentifierAListIdentifiersSequence(AAIdentifierAListIdentifiersSequence node);
    void caseAAListExpressions(AAListExpressions node);
    void caseAAListExpressionsSequence(AAListExpressionsSequence node);
    void caseAAIfThenElseStatement(AAIfThenElseStatement node);
    void caseAAIfStatement(AAIfStatement node);
    void caseAAElseStatement(AAElseStatement node);

    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTConstant(TConstant node);
    void caseTFunction(TFunction node);
    void caseTInt(TInt node);
    void caseTBool(TBool node);
    void caseTReal(TReal node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTThen(TThen node);
    void caseTTkLambda(TTkLambda node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTEntry(TEntry node);
    void caseTLeftParentheses(TLeftParentheses node);
    void caseTRightParentheses(TRightParentheses node);
    void caseTEqual(TEqual node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTDivide(TDivide node);
    void caseTProduct(TProduct node);
    void caseTModule(TModule node);
    void caseTExclamation(TExclamation node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTMinor(TMinor node);
    void caseTBigger(TBigger node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTColon(TColon node);
    void caseTPower(TPower node);
    void caseTIntHexadecimal(TIntHexadecimal node);
    void caseTIntDecimal(TIntDecimal node);
    void caseTFloat(TFloat node);
    void caseTCientificNotation(TCientificNotation node);
    void caseTIdentifier(TIdentifier node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTBlockComment(TBlockComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
