/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAProgram(AAProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFunctionDescription(AAFunctionDescription node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFunctionParameters(AAFunctionParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFunctionExpression(AAFunctionExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIntAType(AAIntAType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAARealAType(AARealAType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABoolAType(AABoolAType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParameters(AAParameters node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersSequence(AAParametersSequence node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParameterAParameter(AAParameterAParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAssignFunctionAParameter(AAAssignFunctionAParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAssignFunction(AAAssignFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersAssign(AAParametersAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParametersAssignSequence(AAParametersAssignSequence node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParameterAssignAParameterAssign(AAParameterAssignAParameterAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAssignFunctionAParameterAssign(AAAssignFunctionAParameterAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIfThenElseStatementAExpression(AAIfThenElseStatementAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACallFunctionAExpression(AACallFunctionAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABlockExpressionAExpression(AABlockExpressionAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALambdaAExpression(AALambdaAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABiggerAExpression(AABiggerAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMinorAExpression(AAMinorAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAEqualAExpression(AAEqualAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANegationAExpression(AANegationAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAOrAExpression(AAOrAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAndAExpression(AAAndAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAPlusAExpression(AAPlusAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMinusAExpression(AAMinusAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMultAExpression(AAMultAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADivAExpression(AADivAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAModAExpression(AAModAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANegativeNumberAExpression(AANegativeNumberAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAATrueAExpression(AATrueAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFalseAExpression(AAFalseAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIntDecimalAExpression(AAIntDecimalAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIntHexadecimalAExpression(AAIntHexadecimalAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFloatAExpression(AAFloatAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACientificNotationAExpression(AACientificNotationAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdentifierAExpression(AAIdentifierAExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABlockExpression(AABlockExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADeclarationConstant(AADeclarationConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACallFunction(AACallFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALambda(AALambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAListIdentifiers(AAListIdentifiers node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdentifierAListIdentifiersSequence(AAIdentifierAListIdentifiersSequence node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAListExpressions(AAListExpressions node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAListExpressionsSequence(AAListExpressionsSequence node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIfThenElseStatement(AAIfThenElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIfStatement(AAIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAElseStatement(AAElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConstant(TConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBool(TBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTkLambda(TTkLambda node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntry(TEntry node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParentheses(TLeftParentheses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParentheses(TRightParentheses node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProduct(TProduct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModule(TModule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExclamation(TExclamation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinor(TMinor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBigger(TBigger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBracket(TLeftBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBracket(TRightBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPower(TPower node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntHexadecimal(TIntHexadecimal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntDecimal(TIntDecimal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCientificNotation(TCientificNotation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlockComment(TBlockComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
