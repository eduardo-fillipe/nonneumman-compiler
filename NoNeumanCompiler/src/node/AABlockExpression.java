/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AABlockExpression extends PABlockExpression
{
    private final LinkedList<PADeclarationConstant> _aDeclarationConstant_ = new LinkedList<PADeclarationConstant>();
    private PAExpression _aExpression_;

    public AABlockExpression()
    {
        // Constructor
    }

    public AABlockExpression(
        @SuppressWarnings("hiding") List<?> _aDeclarationConstant_,
        @SuppressWarnings("hiding") PAExpression _aExpression_)
    {
        // Constructor
        setADeclarationConstant(_aDeclarationConstant_);

        setAExpression(_aExpression_);

    }

    @Override
    public Object clone()
    {
        return new AABlockExpression(
            cloneList(this._aDeclarationConstant_),
            cloneNode(this._aExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAABlockExpression(this);
    }

    public LinkedList<PADeclarationConstant> getADeclarationConstant()
    {
        return this._aDeclarationConstant_;
    }

    public void setADeclarationConstant(List<?> list)
    {
        for(PADeclarationConstant e : this._aDeclarationConstant_)
        {
            e.parent(null);
        }
        this._aDeclarationConstant_.clear();

        for(Object obj_e : list)
        {
            PADeclarationConstant e = (PADeclarationConstant) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aDeclarationConstant_.add(e);
        }
    }

    public PAExpression getAExpression()
    {
        return this._aExpression_;
    }

    public void setAExpression(PAExpression node)
    {
        if(this._aExpression_ != null)
        {
            this._aExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aDeclarationConstant_)
            + toString(this._aExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aDeclarationConstant_.remove(child))
        {
            return;
        }

        if(this._aExpression_ == child)
        {
            this._aExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PADeclarationConstant> i = this._aDeclarationConstant_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PADeclarationConstant) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._aExpression_ == oldChild)
        {
            setAExpression((PAExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
