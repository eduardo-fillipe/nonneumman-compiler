/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AAElseStatement extends PAElseStatement
{
    private PAExpression _aExpression_;

    public AAElseStatement()
    {
        // Constructor
    }

    public AAElseStatement(
        @SuppressWarnings("hiding") PAExpression _aExpression_)
    {
        // Constructor
        setAExpression(_aExpression_);

    }

    @Override
    public Object clone()
    {
        return new AAElseStatement(
            cloneNode(this._aExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAElseStatement(this);
    }

    public PAExpression getAExpression()
    {
        return this._aExpression_;
    }

    public void setAExpression(PAExpression node)
    {
        if(this._aExpression_ != null)
        {
            this._aExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aExpression_ == child)
        {
            this._aExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aExpression_ == oldChild)
        {
            setAExpression((PAExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
