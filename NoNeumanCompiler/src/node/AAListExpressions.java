/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AAListExpressions extends PAListExpressions
{
    private PAExpression _aExpression_;
    private final LinkedList<PAListExpressionsSequence> _aListExpressionsSequence_ = new LinkedList<PAListExpressionsSequence>();

    public AAListExpressions()
    {
        // Constructor
    }

    public AAListExpressions(
        @SuppressWarnings("hiding") PAExpression _aExpression_,
        @SuppressWarnings("hiding") List<?> _aListExpressionsSequence_)
    {
        // Constructor
        setAExpression(_aExpression_);

        setAListExpressionsSequence(_aListExpressionsSequence_);

    }

    @Override
    public Object clone()
    {
        return new AAListExpressions(
            cloneNode(this._aExpression_),
            cloneList(this._aListExpressionsSequence_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAListExpressions(this);
    }

    public PAExpression getAExpression()
    {
        return this._aExpression_;
    }

    public void setAExpression(PAExpression node)
    {
        if(this._aExpression_ != null)
        {
            this._aExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aExpression_ = node;
    }

    public LinkedList<PAListExpressionsSequence> getAListExpressionsSequence()
    {
        return this._aListExpressionsSequence_;
    }

    public void setAListExpressionsSequence(List<?> list)
    {
        for(PAListExpressionsSequence e : this._aListExpressionsSequence_)
        {
            e.parent(null);
        }
        this._aListExpressionsSequence_.clear();

        for(Object obj_e : list)
        {
            PAListExpressionsSequence e = (PAListExpressionsSequence) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._aListExpressionsSequence_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aExpression_)
            + toString(this._aListExpressionsSequence_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aExpression_ == child)
        {
            this._aExpression_ = null;
            return;
        }

        if(this._aListExpressionsSequence_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aExpression_ == oldChild)
        {
            setAExpression((PAExpression) newChild);
            return;
        }

        for(ListIterator<PAListExpressionsSequence> i = this._aListExpressionsSequence_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAListExpressionsSequence) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
