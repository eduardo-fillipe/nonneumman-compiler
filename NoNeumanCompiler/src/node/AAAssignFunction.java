/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AAAssignFunction extends PAAssignFunction
{
    private PAType _aType_;
    private PAParametersAssign _aParametersAssign_;

    public AAAssignFunction()
    {
        // Constructor
    }

    public AAAssignFunction(
        @SuppressWarnings("hiding") PAType _aType_,
        @SuppressWarnings("hiding") PAParametersAssign _aParametersAssign_)
    {
        // Constructor
        setAType(_aType_);

        setAParametersAssign(_aParametersAssign_);

    }

    @Override
    public Object clone()
    {
        return new AAAssignFunction(
            cloneNode(this._aType_),
            cloneNode(this._aParametersAssign_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAAssignFunction(this);
    }

    public PAType getAType()
    {
        return this._aType_;
    }

    public void setAType(PAType node)
    {
        if(this._aType_ != null)
        {
            this._aType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aType_ = node;
    }

    public PAParametersAssign getAParametersAssign()
    {
        return this._aParametersAssign_;
    }

    public void setAParametersAssign(PAParametersAssign node)
    {
        if(this._aParametersAssign_ != null)
        {
            this._aParametersAssign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aParametersAssign_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aType_)
            + toString(this._aParametersAssign_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aType_ == child)
        {
            this._aType_ = null;
            return;
        }

        if(this._aParametersAssign_ == child)
        {
            this._aParametersAssign_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aType_ == oldChild)
        {
            setAType((PAType) newChild);
            return;
        }

        if(this._aParametersAssign_ == oldChild)
        {
            setAParametersAssign((PAParametersAssign) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
